!function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=8)}([function(t,n,e){(function(t,r){var i;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var u,o=200,a="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",f="Expected a function",l="__lodash_hash_undefined__",c=500,s="__lodash_placeholder__",h=1,p=2,v=4,d=1,g=2,_=1,y=2,b=4,m=8,x=16,w=32,I=64,R=128,E=256,C=512,O=30,A="...",S=800,j=16,L=1,k=2,N=1/0,M=9007199254740991,T=1.7976931348623157e308,B=NaN,P=4294967295,z=P-1,U=P>>>1,W=[["ary",R],["bind",_],["bindKey",y],["curry",m],["curryRight",x],["flip",C],["partial",w],["partialRight",I],["rearg",E]],D="[object Arguments]",F="[object Array]",q="[object AsyncFunction]",$="[object Boolean]",G="[object Date]",V="[object DOMException]",Z="[object Error]",Y="[object Function]",K="[object GeneratorFunction]",H="[object Map]",J="[object Number]",X="[object Null]",Q="[object Object]",tt="[object Proxy]",nt="[object RegExp]",et="[object Set]",rt="[object String]",it="[object Symbol]",ut="[object Undefined]",ot="[object WeakMap]",at="[object WeakSet]",ft="[object ArrayBuffer]",lt="[object DataView]",ct="[object Float32Array]",st="[object Float64Array]",ht="[object Int8Array]",pt="[object Int16Array]",vt="[object Int32Array]",dt="[object Uint8Array]",gt="[object Uint8ClampedArray]",_t="[object Uint16Array]",yt="[object Uint32Array]",bt=/\b__p \+= '';/g,mt=/\b(__p \+=) '' \+/g,xt=/(__e\(.*?\)|\b__t\)) \+\n'';/g,wt=/&(?:amp|lt|gt|quot|#39);/g,It=/[&<>"']/g,Rt=RegExp(wt.source),Et=RegExp(It.source),Ct=/<%-([\s\S]+?)%>/g,Ot=/<%([\s\S]+?)%>/g,At=/<%=([\s\S]+?)%>/g,St=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,jt=/^\w*$/,Lt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,kt=/[\\^$.*+?()[\]{}|]/g,Nt=RegExp(kt.source),Mt=/^\s+|\s+$/g,Tt=/^\s+/,Bt=/\s+$/,Pt=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,zt=/\{\n\/\* \[wrapped with (.+)\] \*/,Ut=/,? & /,Wt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Dt=/\\(\\)?/g,Ft=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,qt=/\w*$/,$t=/^[-+]0x[0-9a-f]+$/i,Gt=/^0b[01]+$/i,Vt=/^\[object .+?Constructor\]$/,Zt=/^0o[0-7]+$/i,Yt=/^(?:0|[1-9]\d*)$/,Kt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Ht=/($^)/,Jt=/['\n\r\u2028\u2029\\]/g,Xt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Qt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",tn="[\\ud800-\\udfff]",nn="["+Qt+"]",en="["+Xt+"]",rn="\\d+",un="[\\u2700-\\u27bf]",on="[a-z\\xdf-\\xf6\\xf8-\\xff]",an="[^\\ud800-\\udfff"+Qt+rn+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",fn="\\ud83c[\\udffb-\\udfff]",ln="[^\\ud800-\\udfff]",cn="(?:\\ud83c[\\udde6-\\uddff]){2}",sn="[\\ud800-\\udbff][\\udc00-\\udfff]",hn="[A-Z\\xc0-\\xd6\\xd8-\\xde]",pn="(?:"+on+"|"+an+")",vn="(?:"+hn+"|"+an+")",dn="(?:"+en+"|"+fn+")"+"?",gn="[\\ufe0e\\ufe0f]?"+dn+("(?:\\u200d(?:"+[ln,cn,sn].join("|")+")[\\ufe0e\\ufe0f]?"+dn+")*"),_n="(?:"+[un,cn,sn].join("|")+")"+gn,yn="(?:"+[ln+en+"?",en,cn,sn,tn].join("|")+")",bn=RegExp("['’]","g"),mn=RegExp(en,"g"),xn=RegExp(fn+"(?="+fn+")|"+yn+gn,"g"),wn=RegExp([hn+"?"+on+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[nn,hn,"$"].join("|")+")",vn+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[nn,hn+pn,"$"].join("|")+")",hn+"?"+pn+"+(?:['’](?:d|ll|m|re|s|t|ve))?",hn+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",rn,_n].join("|"),"g"),In=RegExp("[\\u200d\\ud800-\\udfff"+Xt+"\\ufe0e\\ufe0f]"),Rn=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,En=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Cn=-1,On={};On[ct]=On[st]=On[ht]=On[pt]=On[vt]=On[dt]=On[gt]=On[_t]=On[yt]=!0,On[D]=On[F]=On[ft]=On[$]=On[lt]=On[G]=On[Z]=On[Y]=On[H]=On[J]=On[Q]=On[nt]=On[et]=On[rt]=On[ot]=!1;var An={};An[D]=An[F]=An[ft]=An[lt]=An[$]=An[G]=An[ct]=An[st]=An[ht]=An[pt]=An[vt]=An[H]=An[J]=An[Q]=An[nt]=An[et]=An[rt]=An[it]=An[dt]=An[gt]=An[_t]=An[yt]=!0,An[Z]=An[Y]=An[ot]=!1;var Sn={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},jn=parseFloat,Ln=parseInt,kn="object"==typeof t&&t&&t.Object===Object&&t,Nn="object"==typeof self&&self&&self.Object===Object&&self,Mn=kn||Nn||Function("return this")(),Tn="object"==typeof n&&n&&!n.nodeType&&n,Bn=Tn&&"object"==typeof r&&r&&!r.nodeType&&r,Pn=Bn&&Bn.exports===Tn,zn=Pn&&kn.process,Un=function(){try{var t=Bn&&Bn.require&&Bn.require("util").types;return t||zn&&zn.binding&&zn.binding("util")}catch(t){}}(),Wn=Un&&Un.isArrayBuffer,Dn=Un&&Un.isDate,Fn=Un&&Un.isMap,qn=Un&&Un.isRegExp,$n=Un&&Un.isSet,Gn=Un&&Un.isTypedArray;function Vn(t,n,e){switch(e.length){case 0:return t.call(n);case 1:return t.call(n,e[0]);case 2:return t.call(n,e[0],e[1]);case 3:return t.call(n,e[0],e[1],e[2])}return t.apply(n,e)}function Zn(t,n,e,r){for(var i=-1,u=null==t?0:t.length;++i<u;){var o=t[i];n(r,o,e(o),t)}return r}function Yn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r&&!1!==n(t[e],e,t););return t}function Kn(t,n){for(var e=null==t?0:t.length;e--&&!1!==n(t[e],e,t););return t}function Hn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(!n(t[e],e,t))return!1;return!0}function Jn(t,n){for(var e=-1,r=null==t?0:t.length,i=0,u=[];++e<r;){var o=t[e];n(o,e,t)&&(u[i++]=o)}return u}function Xn(t,n){return!!(null==t?0:t.length)&&fe(t,n,0)>-1}function Qn(t,n,e){for(var r=-1,i=null==t?0:t.length;++r<i;)if(e(n,t[r]))return!0;return!1}function te(t,n){for(var e=-1,r=null==t?0:t.length,i=Array(r);++e<r;)i[e]=n(t[e],e,t);return i}function ne(t,n){for(var e=-1,r=n.length,i=t.length;++e<r;)t[i+e]=n[e];return t}function ee(t,n,e,r){var i=-1,u=null==t?0:t.length;for(r&&u&&(e=t[++i]);++i<u;)e=n(e,t[i],i,t);return e}function re(t,n,e,r){var i=null==t?0:t.length;for(r&&i&&(e=t[--i]);i--;)e=n(e,t[i],i,t);return e}function ie(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(n(t[e],e,t))return!0;return!1}var ue=he("length");function oe(t,n,e){var r;return e(t,function(t,e,i){if(n(t,e,i))return r=e,!1}),r}function ae(t,n,e,r){for(var i=t.length,u=e+(r?1:-1);r?u--:++u<i;)if(n(t[u],u,t))return u;return-1}function fe(t,n,e){return n==n?function(t,n,e){var r=e-1,i=t.length;for(;++r<i;)if(t[r]===n)return r;return-1}(t,n,e):ae(t,ce,e)}function le(t,n,e,r){for(var i=e-1,u=t.length;++i<u;)if(r(t[i],n))return i;return-1}function ce(t){return t!=t}function se(t,n){var e=null==t?0:t.length;return e?de(t,n)/e:B}function he(t){return function(n){return null==n?u:n[t]}}function pe(t){return function(n){return null==t?u:t[n]}}function ve(t,n,e,r,i){return i(t,function(t,i,u){e=r?(r=!1,t):n(e,t,i,u)}),e}function de(t,n){for(var e,r=-1,i=t.length;++r<i;){var o=n(t[r]);o!==u&&(e=e===u?o:e+o)}return e}function ge(t,n){for(var e=-1,r=Array(t);++e<t;)r[e]=n(e);return r}function _e(t){return function(n){return t(n)}}function ye(t,n){return te(n,function(n){return t[n]})}function be(t,n){return t.has(n)}function me(t,n){for(var e=-1,r=t.length;++e<r&&fe(n,t[e],0)>-1;);return e}function xe(t,n){for(var e=t.length;e--&&fe(n,t[e],0)>-1;);return e}var we=pe({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Ie=pe({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Re(t){return"\\"+Sn[t]}function Ee(t){return In.test(t)}function Ce(t){var n=-1,e=Array(t.size);return t.forEach(function(t,r){e[++n]=[r,t]}),e}function Oe(t,n){return function(e){return t(n(e))}}function Ae(t,n){for(var e=-1,r=t.length,i=0,u=[];++e<r;){var o=t[e];o!==n&&o!==s||(t[e]=s,u[i++]=e)}return u}function Se(t,n){return"__proto__"==n?u:t[n]}function je(t){var n=-1,e=Array(t.size);return t.forEach(function(t){e[++n]=t}),e}function Le(t){var n=-1,e=Array(t.size);return t.forEach(function(t){e[++n]=[t,t]}),e}function ke(t){return Ee(t)?function(t){var n=xn.lastIndex=0;for(;xn.test(t);)++n;return n}(t):ue(t)}function Ne(t){return Ee(t)?function(t){return t.match(xn)||[]}(t):function(t){return t.split("")}(t)}var Me=pe({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Te=function t(n){var e,r=(n=null==n?Mn:Te.defaults(Mn.Object(),n,Te.pick(Mn,En))).Array,i=n.Date,Xt=n.Error,Qt=n.Function,tn=n.Math,nn=n.Object,en=n.RegExp,rn=n.String,un=n.TypeError,on=r.prototype,an=Qt.prototype,fn=nn.prototype,ln=n["__core-js_shared__"],cn=an.toString,sn=fn.hasOwnProperty,hn=0,pn=(e=/[^.]+$/.exec(ln&&ln.keys&&ln.keys.IE_PROTO||""))?"Symbol(src)_1."+e:"",vn=fn.toString,dn=cn.call(nn),gn=Mn._,_n=en("^"+cn.call(sn).replace(kt,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),yn=Pn?n.Buffer:u,xn=n.Symbol,In=n.Uint8Array,Sn=yn?yn.allocUnsafe:u,kn=Oe(nn.getPrototypeOf,nn),Nn=nn.create,Tn=fn.propertyIsEnumerable,Bn=on.splice,zn=xn?xn.isConcatSpreadable:u,Un=xn?xn.iterator:u,ue=xn?xn.toStringTag:u,pe=function(){try{var t=Uu(nn,"defineProperty");return t({},"",{}),t}catch(t){}}(),Be=n.clearTimeout!==Mn.clearTimeout&&n.clearTimeout,Pe=i&&i.now!==Mn.Date.now&&i.now,ze=n.setTimeout!==Mn.setTimeout&&n.setTimeout,Ue=tn.ceil,We=tn.floor,De=nn.getOwnPropertySymbols,Fe=yn?yn.isBuffer:u,qe=n.isFinite,$e=on.join,Ge=Oe(nn.keys,nn),Ve=tn.max,Ze=tn.min,Ye=i.now,Ke=n.parseInt,He=tn.random,Je=on.reverse,Xe=Uu(n,"DataView"),Qe=Uu(n,"Map"),tr=Uu(n,"Promise"),nr=Uu(n,"Set"),er=Uu(n,"WeakMap"),rr=Uu(nn,"create"),ir=er&&new er,ur={},or=co(Xe),ar=co(Qe),fr=co(tr),lr=co(nr),cr=co(er),sr=xn?xn.prototype:u,hr=sr?sr.valueOf:u,pr=sr?sr.toString:u;function vr(t){if(Aa(t)&&!_a(t)&&!(t instanceof yr)){if(t instanceof _r)return t;if(sn.call(t,"__wrapped__"))return so(t)}return new _r(t)}var dr=function(){function t(){}return function(n){if(!Oa(n))return{};if(Nn)return Nn(n);t.prototype=n;var e=new t;return t.prototype=u,e}}();function gr(){}function _r(t,n){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!n,this.__index__=0,this.__values__=u}function yr(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=P,this.__views__=[]}function br(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function mr(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function xr(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function wr(t){var n=-1,e=null==t?0:t.length;for(this.__data__=new xr;++n<e;)this.add(t[n])}function Ir(t){var n=this.__data__=new mr(t);this.size=n.size}function Rr(t,n){var e=_a(t),r=!e&&ga(t),i=!e&&!r&&xa(t),u=!e&&!r&&!i&&Ba(t),o=e||r||i||u,a=o?ge(t.length,rn):[],f=a.length;for(var l in t)!n&&!sn.call(t,l)||o&&("length"==l||i&&("offset"==l||"parent"==l)||u&&("buffer"==l||"byteLength"==l||"byteOffset"==l)||Vu(l,f))||a.push(l);return a}function Er(t){var n=t.length;return n?t[wi(0,n-1)]:u}function Cr(t,n){return ao(ru(t),Tr(n,0,t.length))}function Or(t){return ao(ru(t))}function Ar(t,n,e){(e===u||pa(t[n],e))&&(e!==u||n in t)||Nr(t,n,e)}function Sr(t,n,e){var r=t[n];sn.call(t,n)&&pa(r,e)&&(e!==u||n in t)||Nr(t,n,e)}function jr(t,n){for(var e=t.length;e--;)if(pa(t[e][0],n))return e;return-1}function Lr(t,n,e,r){return Wr(t,function(t,i,u){n(r,t,e(t),u)}),r}function kr(t,n){return t&&iu(n,uf(n),t)}function Nr(t,n,e){"__proto__"==n&&pe?pe(t,n,{configurable:!0,enumerable:!0,value:e,writable:!0}):t[n]=e}function Mr(t,n){for(var e=-1,i=n.length,o=r(i),a=null==t;++e<i;)o[e]=a?u:Qa(t,n[e]);return o}function Tr(t,n,e){return t==t&&(e!==u&&(t=t<=e?t:e),n!==u&&(t=t>=n?t:n)),t}function Br(t,n,e,r,i,o){var a,f=n&h,l=n&p,c=n&v;if(e&&(a=i?e(t,r,i,o):e(t)),a!==u)return a;if(!Oa(t))return t;var s=_a(t);if(s){if(a=function(t){var n=t.length,e=new t.constructor(n);return n&&"string"==typeof t[0]&&sn.call(t,"index")&&(e.index=t.index,e.input=t.input),e}(t),!f)return ru(t,a)}else{var d=Fu(t),g=d==Y||d==K;if(xa(t))return Ji(t,f);if(d==Q||d==D||g&&!i){if(a=l||g?{}:$u(t),!f)return l?function(t,n){return iu(t,Du(t),n)}(t,function(t,n){return t&&iu(n,of(n),t)}(a,t)):function(t,n){return iu(t,Wu(t),n)}(t,kr(a,t))}else{if(!An[d])return i?t:{};a=function(t,n,e){var r,i,u,o=t.constructor;switch(n){case ft:return Xi(t);case $:case G:return new o(+t);case lt:return function(t,n){var e=n?Xi(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.byteLength)}(t,e);case ct:case st:case ht:case pt:case vt:case dt:case gt:case _t:case yt:return Qi(t,e);case H:return new o;case J:case rt:return new o(t);case nt:return(u=new(i=t).constructor(i.source,qt.exec(i))).lastIndex=i.lastIndex,u;case et:return new o;case it:return r=t,hr?nn(hr.call(r)):{}}}(t,d,f)}}o||(o=new Ir);var _=o.get(t);if(_)return _;if(o.set(t,a),Na(t))return t.forEach(function(r){a.add(Br(r,n,e,r,t,o))}),a;if(Sa(t))return t.forEach(function(r,i){a.set(i,Br(r,n,e,i,t,o))}),a;var y=s?u:(c?l?ku:Lu:l?of:uf)(t);return Yn(y||t,function(r,i){y&&(r=t[i=r]),Sr(a,i,Br(r,n,e,i,t,o))}),a}function Pr(t,n,e){var r=e.length;if(null==t)return!r;for(t=nn(t);r--;){var i=e[r],o=n[i],a=t[i];if(a===u&&!(i in t)||!o(a))return!1}return!0}function zr(t,n,e){if("function"!=typeof t)throw new un(f);return ro(function(){t.apply(u,e)},n)}function Ur(t,n,e,r){var i=-1,u=Xn,a=!0,f=t.length,l=[],c=n.length;if(!f)return l;e&&(n=te(n,_e(e))),r?(u=Qn,a=!1):n.length>=o&&(u=be,a=!1,n=new wr(n));t:for(;++i<f;){var s=t[i],h=null==e?s:e(s);if(s=r||0!==s?s:0,a&&h==h){for(var p=c;p--;)if(n[p]===h)continue t;l.push(s)}else u(n,h,r)||l.push(s)}return l}vr.templateSettings={escape:Ct,evaluate:Ot,interpolate:At,variable:"",imports:{_:vr}},vr.prototype=gr.prototype,vr.prototype.constructor=vr,_r.prototype=dr(gr.prototype),_r.prototype.constructor=_r,yr.prototype=dr(gr.prototype),yr.prototype.constructor=yr,br.prototype.clear=function(){this.__data__=rr?rr(null):{},this.size=0},br.prototype.delete=function(t){var n=this.has(t)&&delete this.__data__[t];return this.size-=n?1:0,n},br.prototype.get=function(t){var n=this.__data__;if(rr){var e=n[t];return e===l?u:e}return sn.call(n,t)?n[t]:u},br.prototype.has=function(t){var n=this.__data__;return rr?n[t]!==u:sn.call(n,t)},br.prototype.set=function(t,n){var e=this.__data__;return this.size+=this.has(t)?0:1,e[t]=rr&&n===u?l:n,this},mr.prototype.clear=function(){this.__data__=[],this.size=0},mr.prototype.delete=function(t){var n=this.__data__,e=jr(n,t);return!(e<0||(e==n.length-1?n.pop():Bn.call(n,e,1),--this.size,0))},mr.prototype.get=function(t){var n=this.__data__,e=jr(n,t);return e<0?u:n[e][1]},mr.prototype.has=function(t){return jr(this.__data__,t)>-1},mr.prototype.set=function(t,n){var e=this.__data__,r=jr(e,t);return r<0?(++this.size,e.push([t,n])):e[r][1]=n,this},xr.prototype.clear=function(){this.size=0,this.__data__={hash:new br,map:new(Qe||mr),string:new br}},xr.prototype.delete=function(t){var n=Pu(this,t).delete(t);return this.size-=n?1:0,n},xr.prototype.get=function(t){return Pu(this,t).get(t)},xr.prototype.has=function(t){return Pu(this,t).has(t)},xr.prototype.set=function(t,n){var e=Pu(this,t),r=e.size;return e.set(t,n),this.size+=e.size==r?0:1,this},wr.prototype.add=wr.prototype.push=function(t){return this.__data__.set(t,l),this},wr.prototype.has=function(t){return this.__data__.has(t)},Ir.prototype.clear=function(){this.__data__=new mr,this.size=0},Ir.prototype.delete=function(t){var n=this.__data__,e=n.delete(t);return this.size=n.size,e},Ir.prototype.get=function(t){return this.__data__.get(t)},Ir.prototype.has=function(t){return this.__data__.has(t)},Ir.prototype.set=function(t,n){var e=this.__data__;if(e instanceof mr){var r=e.__data__;if(!Qe||r.length<o-1)return r.push([t,n]),this.size=++e.size,this;e=this.__data__=new xr(r)}return e.set(t,n),this.size=e.size,this};var Wr=au(Yr),Dr=au(Kr,!0);function Fr(t,n){var e=!0;return Wr(t,function(t,r,i){return e=!!n(t,r,i)}),e}function qr(t,n,e){for(var r=-1,i=t.length;++r<i;){var o=t[r],a=n(o);if(null!=a&&(f===u?a==a&&!Ta(a):e(a,f)))var f=a,l=o}return l}function $r(t,n){var e=[];return Wr(t,function(t,r,i){n(t,r,i)&&e.push(t)}),e}function Gr(t,n,e,r,i){var u=-1,o=t.length;for(e||(e=Gu),i||(i=[]);++u<o;){var a=t[u];n>0&&e(a)?n>1?Gr(a,n-1,e,r,i):ne(i,a):r||(i[i.length]=a)}return i}var Vr=fu(),Zr=fu(!0);function Yr(t,n){return t&&Vr(t,n,uf)}function Kr(t,n){return t&&Zr(t,n,uf)}function Hr(t,n){return Jn(n,function(n){return Ra(t[n])})}function Jr(t,n){for(var e=0,r=(n=Zi(n,t)).length;null!=t&&e<r;)t=t[lo(n[e++])];return e&&e==r?t:u}function Xr(t,n,e){var r=n(t);return _a(t)?r:ne(r,e(t))}function Qr(t){return null==t?t===u?ut:X:ue&&ue in nn(t)?function(t){var n=sn.call(t,ue),e=t[ue];try{t[ue]=u;var r=!0}catch(t){}var i=vn.call(t);return r&&(n?t[ue]=e:delete t[ue]),i}(t):function(t){return vn.call(t)}(t)}function ti(t,n){return t>n}function ni(t,n){return null!=t&&sn.call(t,n)}function ei(t,n){return null!=t&&n in nn(t)}function ri(t,n,e){for(var i=e?Qn:Xn,o=t[0].length,a=t.length,f=a,l=r(a),c=1/0,s=[];f--;){var h=t[f];f&&n&&(h=te(h,_e(n))),c=Ze(h.length,c),l[f]=!e&&(n||o>=120&&h.length>=120)?new wr(f&&h):u}h=t[0];var p=-1,v=l[0];t:for(;++p<o&&s.length<c;){var d=h[p],g=n?n(d):d;if(d=e||0!==d?d:0,!(v?be(v,g):i(s,g,e))){for(f=a;--f;){var _=l[f];if(!(_?be(_,g):i(t[f],g,e)))continue t}v&&v.push(g),s.push(d)}}return s}function ii(t,n,e){var r=null==(t=no(t,n=Zi(n,t)))?t:t[lo(Io(n))];return null==r?u:Vn(r,t,e)}function ui(t){return Aa(t)&&Qr(t)==D}function oi(t,n,e,r,i){return t===n||(null==t||null==n||!Aa(t)&&!Aa(n)?t!=t&&n!=n:function(t,n,e,r,i,o){var a=_a(t),f=_a(n),l=a?F:Fu(t),c=f?F:Fu(n),s=(l=l==D?Q:l)==Q,h=(c=c==D?Q:c)==Q,p=l==c;if(p&&xa(t)){if(!xa(n))return!1;a=!0,s=!1}if(p&&!s)return o||(o=new Ir),a||Ba(t)?Su(t,n,e,r,i,o):function(t,n,e,r,i,u,o){switch(e){case lt:if(t.byteLength!=n.byteLength||t.byteOffset!=n.byteOffset)return!1;t=t.buffer,n=n.buffer;case ft:return!(t.byteLength!=n.byteLength||!u(new In(t),new In(n)));case $:case G:case J:return pa(+t,+n);case Z:return t.name==n.name&&t.message==n.message;case nt:case rt:return t==n+"";case H:var a=Ce;case et:var f=r&d;if(a||(a=je),t.size!=n.size&&!f)return!1;var l=o.get(t);if(l)return l==n;r|=g,o.set(t,n);var c=Su(a(t),a(n),r,i,u,o);return o.delete(t),c;case it:if(hr)return hr.call(t)==hr.call(n)}return!1}(t,n,l,e,r,i,o);if(!(e&d)){var v=s&&sn.call(t,"__wrapped__"),_=h&&sn.call(n,"__wrapped__");if(v||_){var y=v?t.value():t,b=_?n.value():n;return o||(o=new Ir),i(y,b,e,r,o)}}return!!p&&(o||(o=new Ir),function(t,n,e,r,i,o){var a=e&d,f=Lu(t),l=f.length,c=Lu(n).length;if(l!=c&&!a)return!1;for(var s=l;s--;){var h=f[s];if(!(a?h in n:sn.call(n,h)))return!1}var p=o.get(t);if(p&&o.get(n))return p==n;var v=!0;o.set(t,n),o.set(n,t);for(var g=a;++s<l;){h=f[s];var _=t[h],y=n[h];if(r)var b=a?r(y,_,h,n,t,o):r(_,y,h,t,n,o);if(!(b===u?_===y||i(_,y,e,r,o):b)){v=!1;break}g||(g="constructor"==h)}if(v&&!g){var m=t.constructor,x=n.constructor;m!=x&&"constructor"in t&&"constructor"in n&&!("function"==typeof m&&m instanceof m&&"function"==typeof x&&x instanceof x)&&(v=!1)}return o.delete(t),o.delete(n),v}(t,n,e,r,i,o))}(t,n,e,r,oi,i))}function ai(t,n,e,r){var i=e.length,o=i,a=!r;if(null==t)return!o;for(t=nn(t);i--;){var f=e[i];if(a&&f[2]?f[1]!==t[f[0]]:!(f[0]in t))return!1}for(;++i<o;){var l=(f=e[i])[0],c=t[l],s=f[1];if(a&&f[2]){if(c===u&&!(l in t))return!1}else{var h=new Ir;if(r)var p=r(c,s,l,t,n,h);if(!(p===u?oi(s,c,d|g,r,h):p))return!1}}return!0}function fi(t){return!(!Oa(t)||pn&&pn in t)&&(Ra(t)?_n:Vt).test(co(t))}function li(t){return"function"==typeof t?t:null==t?Lf:"object"==typeof t?_a(t)?di(t[0],t[1]):vi(t):Wf(t)}function ci(t){if(!Ju(t))return Ge(t);var n=[];for(var e in nn(t))sn.call(t,e)&&"constructor"!=e&&n.push(e);return n}function si(t){if(!Oa(t))return function(t){var n=[];if(null!=t)for(var e in nn(t))n.push(e);return n}(t);var n=Ju(t),e=[];for(var r in t)("constructor"!=r||!n&&sn.call(t,r))&&e.push(r);return e}function hi(t,n){return t<n}function pi(t,n){var e=-1,i=ba(t)?r(t.length):[];return Wr(t,function(t,r,u){i[++e]=n(t,r,u)}),i}function vi(t){var n=zu(t);return 1==n.length&&n[0][2]?Qu(n[0][0],n[0][1]):function(e){return e===t||ai(e,t,n)}}function di(t,n){return Yu(t)&&Xu(n)?Qu(lo(t),n):function(e){var r=Qa(e,t);return r===u&&r===n?tf(e,t):oi(n,r,d|g)}}function gi(t,n,e,r,i){t!==n&&Vr(n,function(o,a){if(Oa(o))i||(i=new Ir),function(t,n,e,r,i,o,a){var f=Se(t,e),l=Se(n,e),c=a.get(l);if(c)Ar(t,e,c);else{var s=o?o(f,l,e+"",t,n,a):u,h=s===u;if(h){var p=_a(l),v=!p&&xa(l),d=!p&&!v&&Ba(l);s=l,p||v||d?_a(f)?s=f:ma(f)?s=ru(f):v?(h=!1,s=Ji(l,!0)):d?(h=!1,s=Qi(l,!0)):s=[]:La(l)||ga(l)?(s=f,ga(f)?s=$a(f):(!Oa(f)||r&&Ra(f))&&(s=$u(l))):h=!1}h&&(a.set(l,s),i(s,l,r,o,a),a.delete(l)),Ar(t,e,s)}}(t,n,a,e,gi,r,i);else{var f=r?r(Se(t,a),o,a+"",t,n,i):u;f===u&&(f=o),Ar(t,a,f)}},of)}function _i(t,n){var e=t.length;if(e)return Vu(n+=n<0?e:0,e)?t[n]:u}function yi(t,n,e){var r=-1;return n=te(n.length?n:[Lf],_e(Bu())),function(t,n){var e=t.length;for(t.sort(n);e--;)t[e]=t[e].value;return t}(pi(t,function(t,e,i){return{criteria:te(n,function(n){return n(t)}),index:++r,value:t}}),function(t,n){return function(t,n,e){for(var r=-1,i=t.criteria,u=n.criteria,o=i.length,a=e.length;++r<o;){var f=tu(i[r],u[r]);if(f){if(r>=a)return f;var l=e[r];return f*("desc"==l?-1:1)}}return t.index-n.index}(t,n,e)})}function bi(t,n,e){for(var r=-1,i=n.length,u={};++r<i;){var o=n[r],a=Jr(t,o);e(a,o)&&Oi(u,Zi(o,t),a)}return u}function mi(t,n,e,r){var i=r?le:fe,u=-1,o=n.length,a=t;for(t===n&&(n=ru(n)),e&&(a=te(t,_e(e)));++u<o;)for(var f=0,l=n[u],c=e?e(l):l;(f=i(a,c,f,r))>-1;)a!==t&&Bn.call(a,f,1),Bn.call(t,f,1);return t}function xi(t,n){for(var e=t?n.length:0,r=e-1;e--;){var i=n[e];if(e==r||i!==u){var u=i;Vu(i)?Bn.call(t,i,1):Ui(t,i)}}return t}function wi(t,n){return t+We(He()*(n-t+1))}function Ii(t,n){var e="";if(!t||n<1||n>M)return e;do{n%2&&(e+=t),(n=We(n/2))&&(t+=t)}while(n);return e}function Ri(t,n){return io(to(t,n,Lf),t+"")}function Ei(t){return Er(vf(t))}function Ci(t,n){var e=vf(t);return ao(e,Tr(n,0,e.length))}function Oi(t,n,e,r){if(!Oa(t))return t;for(var i=-1,o=(n=Zi(n,t)).length,a=o-1,f=t;null!=f&&++i<o;){var l=lo(n[i]),c=e;if(i!=a){var s=f[l];(c=r?r(s,l,f):u)===u&&(c=Oa(s)?s:Vu(n[i+1])?[]:{})}Sr(f,l,c),f=f[l]}return t}var Ai=ir?function(t,n){return ir.set(t,n),t}:Lf,Si=pe?function(t,n){return pe(t,"toString",{configurable:!0,enumerable:!1,value:Af(n),writable:!0})}:Lf;function ji(t){return ao(vf(t))}function Li(t,n,e){var i=-1,u=t.length;n<0&&(n=-n>u?0:u+n),(e=e>u?u:e)<0&&(e+=u),u=n>e?0:e-n>>>0,n>>>=0;for(var o=r(u);++i<u;)o[i]=t[i+n];return o}function ki(t,n){var e;return Wr(t,function(t,r,i){return!(e=n(t,r,i))}),!!e}function Ni(t,n,e){var r=0,i=null==t?r:t.length;if("number"==typeof n&&n==n&&i<=U){for(;r<i;){var u=r+i>>>1,o=t[u];null!==o&&!Ta(o)&&(e?o<=n:o<n)?r=u+1:i=u}return i}return Mi(t,n,Lf,e)}function Mi(t,n,e,r){n=e(n);for(var i=0,o=null==t?0:t.length,a=n!=n,f=null===n,l=Ta(n),c=n===u;i<o;){var s=We((i+o)/2),h=e(t[s]),p=h!==u,v=null===h,d=h==h,g=Ta(h);if(a)var _=r||d;else _=c?d&&(r||p):f?d&&p&&(r||!v):l?d&&p&&!v&&(r||!g):!v&&!g&&(r?h<=n:h<n);_?i=s+1:o=s}return Ze(o,z)}function Ti(t,n){for(var e=-1,r=t.length,i=0,u=[];++e<r;){var o=t[e],a=n?n(o):o;if(!e||!pa(a,f)){var f=a;u[i++]=0===o?0:o}}return u}function Bi(t){return"number"==typeof t?t:Ta(t)?B:+t}function Pi(t){if("string"==typeof t)return t;if(_a(t))return te(t,Pi)+"";if(Ta(t))return pr?pr.call(t):"";var n=t+"";return"0"==n&&1/t==-N?"-0":n}function zi(t,n,e){var r=-1,i=Xn,u=t.length,a=!0,f=[],l=f;if(e)a=!1,i=Qn;else if(u>=o){var c=n?null:Iu(t);if(c)return je(c);a=!1,i=be,l=new wr}else l=n?[]:f;t:for(;++r<u;){var s=t[r],h=n?n(s):s;if(s=e||0!==s?s:0,a&&h==h){for(var p=l.length;p--;)if(l[p]===h)continue t;n&&l.push(h),f.push(s)}else i(l,h,e)||(l!==f&&l.push(h),f.push(s))}return f}function Ui(t,n){return null==(t=no(t,n=Zi(n,t)))||delete t[lo(Io(n))]}function Wi(t,n,e,r){return Oi(t,n,e(Jr(t,n)),r)}function Di(t,n,e,r){for(var i=t.length,u=r?i:-1;(r?u--:++u<i)&&n(t[u],u,t););return e?Li(t,r?0:u,r?u+1:i):Li(t,r?u+1:0,r?i:u)}function Fi(t,n){var e=t;return e instanceof yr&&(e=e.value()),ee(n,function(t,n){return n.func.apply(n.thisArg,ne([t],n.args))},e)}function qi(t,n,e){var i=t.length;if(i<2)return i?zi(t[0]):[];for(var u=-1,o=r(i);++u<i;)for(var a=t[u],f=-1;++f<i;)f!=u&&(o[u]=Ur(o[u]||a,t[f],n,e));return zi(Gr(o,1),n,e)}function $i(t,n,e){for(var r=-1,i=t.length,o=n.length,a={};++r<i;){var f=r<o?n[r]:u;e(a,t[r],f)}return a}function Gi(t){return ma(t)?t:[]}function Vi(t){return"function"==typeof t?t:Lf}function Zi(t,n){return _a(t)?t:Yu(t,n)?[t]:fo(Ga(t))}var Yi=Ri;function Ki(t,n,e){var r=t.length;return e=e===u?r:e,!n&&e>=r?t:Li(t,n,e)}var Hi=Be||function(t){return Mn.clearTimeout(t)};function Ji(t,n){if(n)return t.slice();var e=t.length,r=Sn?Sn(e):new t.constructor(e);return t.copy(r),r}function Xi(t){var n=new t.constructor(t.byteLength);return new In(n).set(new In(t)),n}function Qi(t,n){var e=n?Xi(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.length)}function tu(t,n){if(t!==n){var e=t!==u,r=null===t,i=t==t,o=Ta(t),a=n!==u,f=null===n,l=n==n,c=Ta(n);if(!f&&!c&&!o&&t>n||o&&a&&l&&!f&&!c||r&&a&&l||!e&&l||!i)return 1;if(!r&&!o&&!c&&t<n||c&&e&&i&&!r&&!o||f&&e&&i||!a&&i||!l)return-1}return 0}function nu(t,n,e,i){for(var u=-1,o=t.length,a=e.length,f=-1,l=n.length,c=Ve(o-a,0),s=r(l+c),h=!i;++f<l;)s[f]=n[f];for(;++u<a;)(h||u<o)&&(s[e[u]]=t[u]);for(;c--;)s[f++]=t[u++];return s}function eu(t,n,e,i){for(var u=-1,o=t.length,a=-1,f=e.length,l=-1,c=n.length,s=Ve(o-f,0),h=r(s+c),p=!i;++u<s;)h[u]=t[u];for(var v=u;++l<c;)h[v+l]=n[l];for(;++a<f;)(p||u<o)&&(h[v+e[a]]=t[u++]);return h}function ru(t,n){var e=-1,i=t.length;for(n||(n=r(i));++e<i;)n[e]=t[e];return n}function iu(t,n,e,r){var i=!e;e||(e={});for(var o=-1,a=n.length;++o<a;){var f=n[o],l=r?r(e[f],t[f],f,e,t):u;l===u&&(l=t[f]),i?Nr(e,f,l):Sr(e,f,l)}return e}function uu(t,n){return function(e,r){var i=_a(e)?Zn:Lr,u=n?n():{};return i(e,t,Bu(r,2),u)}}function ou(t){return Ri(function(n,e){var r=-1,i=e.length,o=i>1?e[i-1]:u,a=i>2?e[2]:u;for(o=t.length>3&&"function"==typeof o?(i--,o):u,a&&Zu(e[0],e[1],a)&&(o=i<3?u:o,i=1),n=nn(n);++r<i;){var f=e[r];f&&t(n,f,r,o)}return n})}function au(t,n){return function(e,r){if(null==e)return e;if(!ba(e))return t(e,r);for(var i=e.length,u=n?i:-1,o=nn(e);(n?u--:++u<i)&&!1!==r(o[u],u,o););return e}}function fu(t){return function(n,e,r){for(var i=-1,u=nn(n),o=r(n),a=o.length;a--;){var f=o[t?a:++i];if(!1===e(u[f],f,u))break}return n}}function lu(t){return function(n){var e=Ee(n=Ga(n))?Ne(n):u,r=e?e[0]:n.charAt(0),i=e?Ki(e,1).join(""):n.slice(1);return r[t]()+i}}function cu(t){return function(n){return ee(Ef(_f(n).replace(bn,"")),t,"")}}function su(t){return function(){var n=arguments;switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3]);case 5:return new t(n[0],n[1],n[2],n[3],n[4]);case 6:return new t(n[0],n[1],n[2],n[3],n[4],n[5]);case 7:return new t(n[0],n[1],n[2],n[3],n[4],n[5],n[6])}var e=dr(t.prototype),r=t.apply(e,n);return Oa(r)?r:e}}function hu(t){return function(n,e,r){var i=nn(n);if(!ba(n)){var o=Bu(e,3);n=uf(n),e=function(t){return o(i[t],t,i)}}var a=t(n,e,r);return a>-1?i[o?n[a]:a]:u}}function pu(t){return ju(function(n){var e=n.length,r=e,i=_r.prototype.thru;for(t&&n.reverse();r--;){var o=n[r];if("function"!=typeof o)throw new un(f);if(i&&!a&&"wrapper"==Mu(o))var a=new _r([],!0)}for(r=a?r:e;++r<e;){var l=Mu(o=n[r]),c="wrapper"==l?Nu(o):u;a=c&&Ku(c[0])&&c[1]==(R|m|w|E)&&!c[4].length&&1==c[9]?a[Mu(c[0])].apply(a,c[3]):1==o.length&&Ku(o)?a[l]():a.thru(o)}return function(){var t=arguments,r=t[0];if(a&&1==t.length&&_a(r))return a.plant(r).value();for(var i=0,u=e?n[i].apply(this,t):r;++i<e;)u=n[i].call(this,u);return u}})}function vu(t,n,e,i,o,a,f,l,c,s){var h=n&R,p=n&_,v=n&y,d=n&(m|x),g=n&C,b=v?u:su(t);return function _(){for(var y=arguments.length,m=r(y),x=y;x--;)m[x]=arguments[x];if(d)var w=Tu(_),I=function(t,n){for(var e=t.length,r=0;e--;)t[e]===n&&++r;return r}(m,w);if(i&&(m=nu(m,i,o,d)),a&&(m=eu(m,a,f,d)),y-=I,d&&y<s){var R=Ae(m,w);return xu(t,n,vu,_.placeholder,e,m,R,l,c,s-y)}var E=p?e:this,C=v?E[t]:t;return y=m.length,l?m=function(t,n){for(var e=t.length,r=Ze(n.length,e),i=ru(t);r--;){var o=n[r];t[r]=Vu(o,e)?i[o]:u}return t}(m,l):g&&y>1&&m.reverse(),h&&c<y&&(m.length=c),this&&this!==Mn&&this instanceof _&&(C=b||su(C)),C.apply(E,m)}}function du(t,n){return function(e,r){return function(t,n,e,r){return Yr(t,function(t,i,u){n(r,e(t),i,u)}),r}(e,t,n(r),{})}}function gu(t,n){return function(e,r){var i;if(e===u&&r===u)return n;if(e!==u&&(i=e),r!==u){if(i===u)return r;"string"==typeof e||"string"==typeof r?(e=Pi(e),r=Pi(r)):(e=Bi(e),r=Bi(r)),i=t(e,r)}return i}}function _u(t){return ju(function(n){return n=te(n,_e(Bu())),Ri(function(e){var r=this;return t(n,function(t){return Vn(t,r,e)})})})}function yu(t,n){var e=(n=n===u?" ":Pi(n)).length;if(e<2)return e?Ii(n,t):n;var r=Ii(n,Ue(t/ke(n)));return Ee(n)?Ki(Ne(r),0,t).join(""):r.slice(0,t)}function bu(t){return function(n,e,i){return i&&"number"!=typeof i&&Zu(n,e,i)&&(e=i=u),n=Wa(n),e===u?(e=n,n=0):e=Wa(e),function(t,n,e,i){for(var u=-1,o=Ve(Ue((n-t)/(e||1)),0),a=r(o);o--;)a[i?o:++u]=t,t+=e;return a}(n,e,i=i===u?n<e?1:-1:Wa(i),t)}}function mu(t){return function(n,e){return"string"==typeof n&&"string"==typeof e||(n=qa(n),e=qa(e)),t(n,e)}}function xu(t,n,e,r,i,o,a,f,l,c){var s=n&m;n|=s?w:I,(n&=~(s?I:w))&b||(n&=~(_|y));var h=[t,n,i,s?o:u,s?a:u,s?u:o,s?u:a,f,l,c],p=e.apply(u,h);return Ku(t)&&eo(p,h),p.placeholder=r,uo(p,t,n)}function wu(t){var n=tn[t];return function(t,e){if(t=qa(t),e=null==e?0:Ze(Da(e),292)){var r=(Ga(t)+"e").split("e");return+((r=(Ga(n(r[0]+"e"+(+r[1]+e)))+"e").split("e"))[0]+"e"+(+r[1]-e))}return n(t)}}var Iu=nr&&1/je(new nr([,-0]))[1]==N?function(t){return new nr(t)}:Bf;function Ru(t){return function(n){var e=Fu(n);return e==H?Ce(n):e==et?Le(n):function(t,n){return te(n,function(n){return[n,t[n]]})}(n,t(n))}}function Eu(t,n,e,i,o,a,l,c){var h=n&y;if(!h&&"function"!=typeof t)throw new un(f);var p=i?i.length:0;if(p||(n&=~(w|I),i=o=u),l=l===u?l:Ve(Da(l),0),c=c===u?c:Da(c),p-=o?o.length:0,n&I){var v=i,d=o;i=o=u}var g=h?u:Nu(t),C=[t,n,e,i,o,v,d,a,l,c];if(g&&function(t,n){var e=t[1],r=n[1],i=e|r,u=i<(_|y|R),o=r==R&&e==m||r==R&&e==E&&t[7].length<=n[8]||r==(R|E)&&n[7].length<=n[8]&&e==m;if(!u&&!o)return t;r&_&&(t[2]=n[2],i|=e&_?0:b);var a=n[3];if(a){var f=t[3];t[3]=f?nu(f,a,n[4]):a,t[4]=f?Ae(t[3],s):n[4]}(a=n[5])&&(f=t[5],t[5]=f?eu(f,a,n[6]):a,t[6]=f?Ae(t[5],s):n[6]),(a=n[7])&&(t[7]=a),r&R&&(t[8]=null==t[8]?n[8]:Ze(t[8],n[8])),null==t[9]&&(t[9]=n[9]),t[0]=n[0],t[1]=i}(C,g),t=C[0],n=C[1],e=C[2],i=C[3],o=C[4],!(c=C[9]=C[9]===u?h?0:t.length:Ve(C[9]-p,0))&&n&(m|x)&&(n&=~(m|x)),n&&n!=_)O=n==m||n==x?function(t,n,e){var i=su(t);return function o(){for(var a=arguments.length,f=r(a),l=a,c=Tu(o);l--;)f[l]=arguments[l];var s=a<3&&f[0]!==c&&f[a-1]!==c?[]:Ae(f,c);return(a-=s.length)<e?xu(t,n,vu,o.placeholder,u,f,s,u,u,e-a):Vn(this&&this!==Mn&&this instanceof o?i:t,this,f)}}(t,n,c):n!=w&&n!=(_|w)||o.length?vu.apply(u,C):function(t,n,e,i){var u=n&_,o=su(t);return function n(){for(var a=-1,f=arguments.length,l=-1,c=i.length,s=r(c+f),h=this&&this!==Mn&&this instanceof n?o:t;++l<c;)s[l]=i[l];for(;f--;)s[l++]=arguments[++a];return Vn(h,u?e:this,s)}}(t,n,e,i);else var O=function(t,n,e){var r=n&_,i=su(t);return function n(){return(this&&this!==Mn&&this instanceof n?i:t).apply(r?e:this,arguments)}}(t,n,e);return uo((g?Ai:eo)(O,C),t,n)}function Cu(t,n,e,r){return t===u||pa(t,fn[e])&&!sn.call(r,e)?n:t}function Ou(t,n,e,r,i,o){return Oa(t)&&Oa(n)&&(o.set(n,t),gi(t,n,u,Ou,o),o.delete(n)),t}function Au(t){return La(t)?u:t}function Su(t,n,e,r,i,o){var a=e&d,f=t.length,l=n.length;if(f!=l&&!(a&&l>f))return!1;var c=o.get(t);if(c&&o.get(n))return c==n;var s=-1,h=!0,p=e&g?new wr:u;for(o.set(t,n),o.set(n,t);++s<f;){var v=t[s],_=n[s];if(r)var y=a?r(_,v,s,n,t,o):r(v,_,s,t,n,o);if(y!==u){if(y)continue;h=!1;break}if(p){if(!ie(n,function(t,n){if(!be(p,n)&&(v===t||i(v,t,e,r,o)))return p.push(n)})){h=!1;break}}else if(v!==_&&!i(v,_,e,r,o)){h=!1;break}}return o.delete(t),o.delete(n),h}function ju(t){return io(to(t,u,yo),t+"")}function Lu(t){return Xr(t,uf,Wu)}function ku(t){return Xr(t,of,Du)}var Nu=ir?function(t){return ir.get(t)}:Bf;function Mu(t){for(var n=t.name+"",e=ur[n],r=sn.call(ur,n)?e.length:0;r--;){var i=e[r],u=i.func;if(null==u||u==t)return i.name}return n}function Tu(t){return(sn.call(vr,"placeholder")?vr:t).placeholder}function Bu(){var t=vr.iteratee||kf;return t=t===kf?li:t,arguments.length?t(arguments[0],arguments[1]):t}function Pu(t,n){var e,r,i=t.__data__;return("string"==(r=typeof(e=n))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==e:null===e)?i["string"==typeof n?"string":"hash"]:i.map}function zu(t){for(var n=uf(t),e=n.length;e--;){var r=n[e],i=t[r];n[e]=[r,i,Xu(i)]}return n}function Uu(t,n){var e=function(t,n){return null==t?u:t[n]}(t,n);return fi(e)?e:u}var Wu=De?function(t){return null==t?[]:(t=nn(t),Jn(De(t),function(n){return Tn.call(t,n)}))}:qf,Du=De?function(t){for(var n=[];t;)ne(n,Wu(t)),t=kn(t);return n}:qf,Fu=Qr;function qu(t,n,e){for(var r=-1,i=(n=Zi(n,t)).length,u=!1;++r<i;){var o=lo(n[r]);if(!(u=null!=t&&e(t,o)))break;t=t[o]}return u||++r!=i?u:!!(i=null==t?0:t.length)&&Ca(i)&&Vu(o,i)&&(_a(t)||ga(t))}function $u(t){return"function"!=typeof t.constructor||Ju(t)?{}:dr(kn(t))}function Gu(t){return _a(t)||ga(t)||!!(zn&&t&&t[zn])}function Vu(t,n){var e=typeof t;return!!(n=null==n?M:n)&&("number"==e||"symbol"!=e&&Yt.test(t))&&t>-1&&t%1==0&&t<n}function Zu(t,n,e){if(!Oa(e))return!1;var r=typeof n;return!!("number"==r?ba(e)&&Vu(n,e.length):"string"==r&&n in e)&&pa(e[n],t)}function Yu(t,n){if(_a(t))return!1;var e=typeof t;return!("number"!=e&&"symbol"!=e&&"boolean"!=e&&null!=t&&!Ta(t))||jt.test(t)||!St.test(t)||null!=n&&t in nn(n)}function Ku(t){var n=Mu(t),e=vr[n];if("function"!=typeof e||!(n in yr.prototype))return!1;if(t===e)return!0;var r=Nu(e);return!!r&&t===r[0]}(Xe&&Fu(new Xe(new ArrayBuffer(1)))!=lt||Qe&&Fu(new Qe)!=H||tr&&"[object Promise]"!=Fu(tr.resolve())||nr&&Fu(new nr)!=et||er&&Fu(new er)!=ot)&&(Fu=function(t){var n=Qr(t),e=n==Q?t.constructor:u,r=e?co(e):"";if(r)switch(r){case or:return lt;case ar:return H;case fr:return"[object Promise]";case lr:return et;case cr:return ot}return n});var Hu=ln?Ra:$f;function Ju(t){var n=t&&t.constructor;return t===("function"==typeof n&&n.prototype||fn)}function Xu(t){return t==t&&!Oa(t)}function Qu(t,n){return function(e){return null!=e&&e[t]===n&&(n!==u||t in nn(e))}}function to(t,n,e){return n=Ve(n===u?t.length-1:n,0),function(){for(var i=arguments,u=-1,o=Ve(i.length-n,0),a=r(o);++u<o;)a[u]=i[n+u];u=-1;for(var f=r(n+1);++u<n;)f[u]=i[u];return f[n]=e(a),Vn(t,this,f)}}function no(t,n){return n.length<2?t:Jr(t,Li(n,0,-1))}var eo=oo(Ai),ro=ze||function(t,n){return Mn.setTimeout(t,n)},io=oo(Si);function uo(t,n,e){var r=n+"";return io(t,function(t,n){var e=n.length;if(!e)return t;var r=e-1;return n[r]=(e>1?"& ":"")+n[r],n=n.join(e>2?", ":" "),t.replace(Pt,"{\n/* [wrapped with "+n+"] */\n")}(r,function(t,n){return Yn(W,function(e){var r="_."+e[0];n&e[1]&&!Xn(t,r)&&t.push(r)}),t.sort()}(function(t){var n=t.match(zt);return n?n[1].split(Ut):[]}(r),e)))}function oo(t){var n=0,e=0;return function(){var r=Ye(),i=j-(r-e);if(e=r,i>0){if(++n>=S)return arguments[0]}else n=0;return t.apply(u,arguments)}}function ao(t,n){var e=-1,r=t.length,i=r-1;for(n=n===u?r:n;++e<n;){var o=wi(e,i),a=t[o];t[o]=t[e],t[e]=a}return t.length=n,t}var fo=function(t){var n=aa(t,function(t){return e.size===c&&e.clear(),t}),e=n.cache;return n}(function(t){var n=[];return 46===t.charCodeAt(0)&&n.push(""),t.replace(Lt,function(t,e,r,i){n.push(r?i.replace(Dt,"$1"):e||t)}),n});function lo(t){if("string"==typeof t||Ta(t))return t;var n=t+"";return"0"==n&&1/t==-N?"-0":n}function co(t){if(null!=t){try{return cn.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function so(t){if(t instanceof yr)return t.clone();var n=new _r(t.__wrapped__,t.__chain__);return n.__actions__=ru(t.__actions__),n.__index__=t.__index__,n.__values__=t.__values__,n}var ho=Ri(function(t,n){return ma(t)?Ur(t,Gr(n,1,ma,!0)):[]}),po=Ri(function(t,n){var e=Io(n);return ma(e)&&(e=u),ma(t)?Ur(t,Gr(n,1,ma,!0),Bu(e,2)):[]}),vo=Ri(function(t,n){var e=Io(n);return ma(e)&&(e=u),ma(t)?Ur(t,Gr(n,1,ma,!0),u,e):[]});function go(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=null==e?0:Da(e);return i<0&&(i=Ve(r+i,0)),ae(t,Bu(n,3),i)}function _o(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=r-1;return e!==u&&(i=Da(e),i=e<0?Ve(r+i,0):Ze(i,r-1)),ae(t,Bu(n,3),i,!0)}function yo(t){return null!=t&&t.length?Gr(t,1):[]}function bo(t){return t&&t.length?t[0]:u}var mo=Ri(function(t){var n=te(t,Gi);return n.length&&n[0]===t[0]?ri(n):[]}),xo=Ri(function(t){var n=Io(t),e=te(t,Gi);return n===Io(e)?n=u:e.pop(),e.length&&e[0]===t[0]?ri(e,Bu(n,2)):[]}),wo=Ri(function(t){var n=Io(t),e=te(t,Gi);return(n="function"==typeof n?n:u)&&e.pop(),e.length&&e[0]===t[0]?ri(e,u,n):[]});function Io(t){var n=null==t?0:t.length;return n?t[n-1]:u}var Ro=Ri(Eo);function Eo(t,n){return t&&t.length&&n&&n.length?mi(t,n):t}var Co=ju(function(t,n){var e=null==t?0:t.length,r=Mr(t,n);return xi(t,te(n,function(t){return Vu(t,e)?+t:t}).sort(tu)),r});function Oo(t){return null==t?t:Je.call(t)}var Ao=Ri(function(t){return zi(Gr(t,1,ma,!0))}),So=Ri(function(t){var n=Io(t);return ma(n)&&(n=u),zi(Gr(t,1,ma,!0),Bu(n,2))}),jo=Ri(function(t){var n=Io(t);return n="function"==typeof n?n:u,zi(Gr(t,1,ma,!0),u,n)});function Lo(t){if(!t||!t.length)return[];var n=0;return t=Jn(t,function(t){if(ma(t))return n=Ve(t.length,n),!0}),ge(n,function(n){return te(t,he(n))})}function ko(t,n){if(!t||!t.length)return[];var e=Lo(t);return null==n?e:te(e,function(t){return Vn(n,u,t)})}var No=Ri(function(t,n){return ma(t)?Ur(t,n):[]}),Mo=Ri(function(t){return qi(Jn(t,ma))}),To=Ri(function(t){var n=Io(t);return ma(n)&&(n=u),qi(Jn(t,ma),Bu(n,2))}),Bo=Ri(function(t){var n=Io(t);return n="function"==typeof n?n:u,qi(Jn(t,ma),u,n)}),Po=Ri(Lo);var zo=Ri(function(t){var n=t.length,e=n>1?t[n-1]:u;return ko(t,e="function"==typeof e?(t.pop(),e):u)});function Uo(t){var n=vr(t);return n.__chain__=!0,n}function Wo(t,n){return n(t)}var Do=ju(function(t){var n=t.length,e=n?t[0]:0,r=this.__wrapped__,i=function(n){return Mr(n,t)};return!(n>1||this.__actions__.length)&&r instanceof yr&&Vu(e)?((r=r.slice(e,+e+(n?1:0))).__actions__.push({func:Wo,args:[i],thisArg:u}),new _r(r,this.__chain__).thru(function(t){return n&&!t.length&&t.push(u),t})):this.thru(i)});var Fo=uu(function(t,n,e){sn.call(t,e)?++t[e]:Nr(t,e,1)});var qo=hu(go),$o=hu(_o);function Go(t,n){return(_a(t)?Yn:Wr)(t,Bu(n,3))}function Vo(t,n){return(_a(t)?Kn:Dr)(t,Bu(n,3))}var Zo=uu(function(t,n,e){sn.call(t,e)?t[e].push(n):Nr(t,e,[n])});var Yo=Ri(function(t,n,e){var i=-1,u="function"==typeof n,o=ba(t)?r(t.length):[];return Wr(t,function(t){o[++i]=u?Vn(n,t,e):ii(t,n,e)}),o}),Ko=uu(function(t,n,e){Nr(t,e,n)});function Ho(t,n){return(_a(t)?te:pi)(t,Bu(n,3))}var Jo=uu(function(t,n,e){t[e?0:1].push(n)},function(){return[[],[]]});var Xo=Ri(function(t,n){if(null==t)return[];var e=n.length;return e>1&&Zu(t,n[0],n[1])?n=[]:e>2&&Zu(n[0],n[1],n[2])&&(n=[n[0]]),yi(t,Gr(n,1),[])}),Qo=Pe||function(){return Mn.Date.now()};function ta(t,n,e){return n=e?u:n,n=t&&null==n?t.length:n,Eu(t,R,u,u,u,u,n)}function na(t,n){var e;if("function"!=typeof n)throw new un(f);return t=Da(t),function(){return--t>0&&(e=n.apply(this,arguments)),t<=1&&(n=u),e}}var ea=Ri(function(t,n,e){var r=_;if(e.length){var i=Ae(e,Tu(ea));r|=w}return Eu(t,r,n,e,i)}),ra=Ri(function(t,n,e){var r=_|y;if(e.length){var i=Ae(e,Tu(ra));r|=w}return Eu(n,r,t,e,i)});function ia(t,n,e){var r,i,o,a,l,c,s=0,h=!1,p=!1,v=!0;if("function"!=typeof t)throw new un(f);function d(n){var e=r,o=i;return r=i=u,s=n,a=t.apply(o,e)}function g(t){var e=t-c;return c===u||e>=n||e<0||p&&t-s>=o}function _(){var t=Qo();if(g(t))return y(t);l=ro(_,function(t){var e=n-(t-c);return p?Ze(e,o-(t-s)):e}(t))}function y(t){return l=u,v&&r?d(t):(r=i=u,a)}function b(){var t=Qo(),e=g(t);if(r=arguments,i=this,c=t,e){if(l===u)return function(t){return s=t,l=ro(_,n),h?d(t):a}(c);if(p)return l=ro(_,n),d(c)}return l===u&&(l=ro(_,n)),a}return n=qa(n)||0,Oa(e)&&(h=!!e.leading,o=(p="maxWait"in e)?Ve(qa(e.maxWait)||0,n):o,v="trailing"in e?!!e.trailing:v),b.cancel=function(){l!==u&&Hi(l),s=0,r=c=i=l=u},b.flush=function(){return l===u?a:y(Qo())},b}var ua=Ri(function(t,n){return zr(t,1,n)}),oa=Ri(function(t,n,e){return zr(t,qa(n)||0,e)});function aa(t,n){if("function"!=typeof t||null!=n&&"function"!=typeof n)throw new un(f);var e=function(){var r=arguments,i=n?n.apply(this,r):r[0],u=e.cache;if(u.has(i))return u.get(i);var o=t.apply(this,r);return e.cache=u.set(i,o)||u,o};return e.cache=new(aa.Cache||xr),e}function fa(t){if("function"!=typeof t)throw new un(f);return function(){var n=arguments;switch(n.length){case 0:return!t.call(this);case 1:return!t.call(this,n[0]);case 2:return!t.call(this,n[0],n[1]);case 3:return!t.call(this,n[0],n[1],n[2])}return!t.apply(this,n)}}aa.Cache=xr;var la=Yi(function(t,n){var e=(n=1==n.length&&_a(n[0])?te(n[0],_e(Bu())):te(Gr(n,1),_e(Bu()))).length;return Ri(function(r){for(var i=-1,u=Ze(r.length,e);++i<u;)r[i]=n[i].call(this,r[i]);return Vn(t,this,r)})}),ca=Ri(function(t,n){var e=Ae(n,Tu(ca));return Eu(t,w,u,n,e)}),sa=Ri(function(t,n){var e=Ae(n,Tu(sa));return Eu(t,I,u,n,e)}),ha=ju(function(t,n){return Eu(t,E,u,u,u,n)});function pa(t,n){return t===n||t!=t&&n!=n}var va=mu(ti),da=mu(function(t,n){return t>=n}),ga=ui(function(){return arguments}())?ui:function(t){return Aa(t)&&sn.call(t,"callee")&&!Tn.call(t,"callee")},_a=r.isArray,ya=Wn?_e(Wn):function(t){return Aa(t)&&Qr(t)==ft};function ba(t){return null!=t&&Ca(t.length)&&!Ra(t)}function ma(t){return Aa(t)&&ba(t)}var xa=Fe||$f,wa=Dn?_e(Dn):function(t){return Aa(t)&&Qr(t)==G};function Ia(t){if(!Aa(t))return!1;var n=Qr(t);return n==Z||n==V||"string"==typeof t.message&&"string"==typeof t.name&&!La(t)}function Ra(t){if(!Oa(t))return!1;var n=Qr(t);return n==Y||n==K||n==q||n==tt}function Ea(t){return"number"==typeof t&&t==Da(t)}function Ca(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=M}function Oa(t){var n=typeof t;return null!=t&&("object"==n||"function"==n)}function Aa(t){return null!=t&&"object"==typeof t}var Sa=Fn?_e(Fn):function(t){return Aa(t)&&Fu(t)==H};function ja(t){return"number"==typeof t||Aa(t)&&Qr(t)==J}function La(t){if(!Aa(t)||Qr(t)!=Q)return!1;var n=kn(t);if(null===n)return!0;var e=sn.call(n,"constructor")&&n.constructor;return"function"==typeof e&&e instanceof e&&cn.call(e)==dn}var ka=qn?_e(qn):function(t){return Aa(t)&&Qr(t)==nt};var Na=$n?_e($n):function(t){return Aa(t)&&Fu(t)==et};function Ma(t){return"string"==typeof t||!_a(t)&&Aa(t)&&Qr(t)==rt}function Ta(t){return"symbol"==typeof t||Aa(t)&&Qr(t)==it}var Ba=Gn?_e(Gn):function(t){return Aa(t)&&Ca(t.length)&&!!On[Qr(t)]};var Pa=mu(hi),za=mu(function(t,n){return t<=n});function Ua(t){if(!t)return[];if(ba(t))return Ma(t)?Ne(t):ru(t);if(Un&&t[Un])return function(t){for(var n,e=[];!(n=t.next()).done;)e.push(n.value);return e}(t[Un]());var n=Fu(t);return(n==H?Ce:n==et?je:vf)(t)}function Wa(t){return t?(t=qa(t))===N||t===-N?(t<0?-1:1)*T:t==t?t:0:0===t?t:0}function Da(t){var n=Wa(t),e=n%1;return n==n?e?n-e:n:0}function Fa(t){return t?Tr(Da(t),0,P):0}function qa(t){if("number"==typeof t)return t;if(Ta(t))return B;if(Oa(t)){var n="function"==typeof t.valueOf?t.valueOf():t;t=Oa(n)?n+"":n}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(Mt,"");var e=Gt.test(t);return e||Zt.test(t)?Ln(t.slice(2),e?2:8):$t.test(t)?B:+t}function $a(t){return iu(t,of(t))}function Ga(t){return null==t?"":Pi(t)}var Va=ou(function(t,n){if(Ju(n)||ba(n))iu(n,uf(n),t);else for(var e in n)sn.call(n,e)&&Sr(t,e,n[e])}),Za=ou(function(t,n){iu(n,of(n),t)}),Ya=ou(function(t,n,e,r){iu(n,of(n),t,r)}),Ka=ou(function(t,n,e,r){iu(n,uf(n),t,r)}),Ha=ju(Mr);var Ja=Ri(function(t,n){t=nn(t);var e=-1,r=n.length,i=r>2?n[2]:u;for(i&&Zu(n[0],n[1],i)&&(r=1);++e<r;)for(var o=n[e],a=of(o),f=-1,l=a.length;++f<l;){var c=a[f],s=t[c];(s===u||pa(s,fn[c])&&!sn.call(t,c))&&(t[c]=o[c])}return t}),Xa=Ri(function(t){return t.push(u,Ou),Vn(ff,u,t)});function Qa(t,n,e){var r=null==t?u:Jr(t,n);return r===u?e:r}function tf(t,n){return null!=t&&qu(t,n,ei)}var nf=du(function(t,n,e){null!=n&&"function"!=typeof n.toString&&(n=vn.call(n)),t[n]=e},Af(Lf)),ef=du(function(t,n,e){null!=n&&"function"!=typeof n.toString&&(n=vn.call(n)),sn.call(t,n)?t[n].push(e):t[n]=[e]},Bu),rf=Ri(ii);function uf(t){return ba(t)?Rr(t):ci(t)}function of(t){return ba(t)?Rr(t,!0):si(t)}var af=ou(function(t,n,e){gi(t,n,e)}),ff=ou(function(t,n,e,r){gi(t,n,e,r)}),lf=ju(function(t,n){var e={};if(null==t)return e;var r=!1;n=te(n,function(n){return n=Zi(n,t),r||(r=n.length>1),n}),iu(t,ku(t),e),r&&(e=Br(e,h|p|v,Au));for(var i=n.length;i--;)Ui(e,n[i]);return e});var cf=ju(function(t,n){return null==t?{}:function(t,n){return bi(t,n,function(n,e){return tf(t,e)})}(t,n)});function sf(t,n){if(null==t)return{};var e=te(ku(t),function(t){return[t]});return n=Bu(n),bi(t,e,function(t,e){return n(t,e[0])})}var hf=Ru(uf),pf=Ru(of);function vf(t){return null==t?[]:ye(t,uf(t))}var df=cu(function(t,n,e){return n=n.toLowerCase(),t+(e?gf(n):n)});function gf(t){return Rf(Ga(t).toLowerCase())}function _f(t){return(t=Ga(t))&&t.replace(Kt,we).replace(mn,"")}var yf=cu(function(t,n,e){return t+(e?"-":"")+n.toLowerCase()}),bf=cu(function(t,n,e){return t+(e?" ":"")+n.toLowerCase()}),mf=lu("toLowerCase");var xf=cu(function(t,n,e){return t+(e?"_":"")+n.toLowerCase()});var wf=cu(function(t,n,e){return t+(e?" ":"")+Rf(n)});var If=cu(function(t,n,e){return t+(e?" ":"")+n.toUpperCase()}),Rf=lu("toUpperCase");function Ef(t,n,e){return t=Ga(t),(n=e?u:n)===u?function(t){return Rn.test(t)}(t)?function(t){return t.match(wn)||[]}(t):function(t){return t.match(Wt)||[]}(t):t.match(n)||[]}var Cf=Ri(function(t,n){try{return Vn(t,u,n)}catch(t){return Ia(t)?t:new Xt(t)}}),Of=ju(function(t,n){return Yn(n,function(n){n=lo(n),Nr(t,n,ea(t[n],t))}),t});function Af(t){return function(){return t}}var Sf=pu(),jf=pu(!0);function Lf(t){return t}function kf(t){return li("function"==typeof t?t:Br(t,h))}var Nf=Ri(function(t,n){return function(e){return ii(e,t,n)}}),Mf=Ri(function(t,n){return function(e){return ii(t,e,n)}});function Tf(t,n,e){var r=uf(n),i=Hr(n,r);null!=e||Oa(n)&&(i.length||!r.length)||(e=n,n=t,t=this,i=Hr(n,uf(n)));var u=!(Oa(e)&&"chain"in e&&!e.chain),o=Ra(t);return Yn(i,function(e){var r=n[e];t[e]=r,o&&(t.prototype[e]=function(){var n=this.__chain__;if(u||n){var e=t(this.__wrapped__);return(e.__actions__=ru(this.__actions__)).push({func:r,args:arguments,thisArg:t}),e.__chain__=n,e}return r.apply(t,ne([this.value()],arguments))})}),t}function Bf(){}var Pf=_u(te),zf=_u(Hn),Uf=_u(ie);function Wf(t){return Yu(t)?he(lo(t)):function(t){return function(n){return Jr(n,t)}}(t)}var Df=bu(),Ff=bu(!0);function qf(){return[]}function $f(){return!1}var Gf=gu(function(t,n){return t+n},0),Vf=wu("ceil"),Zf=gu(function(t,n){return t/n},1),Yf=wu("floor");var Kf,Hf=gu(function(t,n){return t*n},1),Jf=wu("round"),Xf=gu(function(t,n){return t-n},0);return vr.after=function(t,n){if("function"!=typeof n)throw new un(f);return t=Da(t),function(){if(--t<1)return n.apply(this,arguments)}},vr.ary=ta,vr.assign=Va,vr.assignIn=Za,vr.assignInWith=Ya,vr.assignWith=Ka,vr.at=Ha,vr.before=na,vr.bind=ea,vr.bindAll=Of,vr.bindKey=ra,vr.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return _a(t)?t:[t]},vr.chain=Uo,vr.chunk=function(t,n,e){n=(e?Zu(t,n,e):n===u)?1:Ve(Da(n),0);var i=null==t?0:t.length;if(!i||n<1)return[];for(var o=0,a=0,f=r(Ue(i/n));o<i;)f[a++]=Li(t,o,o+=n);return f},vr.compact=function(t){for(var n=-1,e=null==t?0:t.length,r=0,i=[];++n<e;){var u=t[n];u&&(i[r++]=u)}return i},vr.concat=function(){var t=arguments.length;if(!t)return[];for(var n=r(t-1),e=arguments[0],i=t;i--;)n[i-1]=arguments[i];return ne(_a(e)?ru(e):[e],Gr(n,1))},vr.cond=function(t){var n=null==t?0:t.length,e=Bu();return t=n?te(t,function(t){if("function"!=typeof t[1])throw new un(f);return[e(t[0]),t[1]]}):[],Ri(function(e){for(var r=-1;++r<n;){var i=t[r];if(Vn(i[0],this,e))return Vn(i[1],this,e)}})},vr.conforms=function(t){return function(t){var n=uf(t);return function(e){return Pr(e,t,n)}}(Br(t,h))},vr.constant=Af,vr.countBy=Fo,vr.create=function(t,n){var e=dr(t);return null==n?e:kr(e,n)},vr.curry=function t(n,e,r){var i=Eu(n,m,u,u,u,u,u,e=r?u:e);return i.placeholder=t.placeholder,i},vr.curryRight=function t(n,e,r){var i=Eu(n,x,u,u,u,u,u,e=r?u:e);return i.placeholder=t.placeholder,i},vr.debounce=ia,vr.defaults=Ja,vr.defaultsDeep=Xa,vr.defer=ua,vr.delay=oa,vr.difference=ho,vr.differenceBy=po,vr.differenceWith=vo,vr.drop=function(t,n,e){var r=null==t?0:t.length;return r?Li(t,(n=e||n===u?1:Da(n))<0?0:n,r):[]},vr.dropRight=function(t,n,e){var r=null==t?0:t.length;return r?Li(t,0,(n=r-(n=e||n===u?1:Da(n)))<0?0:n):[]},vr.dropRightWhile=function(t,n){return t&&t.length?Di(t,Bu(n,3),!0,!0):[]},vr.dropWhile=function(t,n){return t&&t.length?Di(t,Bu(n,3),!0):[]},vr.fill=function(t,n,e,r){var i=null==t?0:t.length;return i?(e&&"number"!=typeof e&&Zu(t,n,e)&&(e=0,r=i),function(t,n,e,r){var i=t.length;for((e=Da(e))<0&&(e=-e>i?0:i+e),(r=r===u||r>i?i:Da(r))<0&&(r+=i),r=e>r?0:Fa(r);e<r;)t[e++]=n;return t}(t,n,e,r)):[]},vr.filter=function(t,n){return(_a(t)?Jn:$r)(t,Bu(n,3))},vr.flatMap=function(t,n){return Gr(Ho(t,n),1)},vr.flatMapDeep=function(t,n){return Gr(Ho(t,n),N)},vr.flatMapDepth=function(t,n,e){return e=e===u?1:Da(e),Gr(Ho(t,n),e)},vr.flatten=yo,vr.flattenDeep=function(t){return null!=t&&t.length?Gr(t,N):[]},vr.flattenDepth=function(t,n){return null!=t&&t.length?Gr(t,n=n===u?1:Da(n)):[]},vr.flip=function(t){return Eu(t,C)},vr.flow=Sf,vr.flowRight=jf,vr.fromPairs=function(t){for(var n=-1,e=null==t?0:t.length,r={};++n<e;){var i=t[n];r[i[0]]=i[1]}return r},vr.functions=function(t){return null==t?[]:Hr(t,uf(t))},vr.functionsIn=function(t){return null==t?[]:Hr(t,of(t))},vr.groupBy=Zo,vr.initial=function(t){return null!=t&&t.length?Li(t,0,-1):[]},vr.intersection=mo,vr.intersectionBy=xo,vr.intersectionWith=wo,vr.invert=nf,vr.invertBy=ef,vr.invokeMap=Yo,vr.iteratee=kf,vr.keyBy=Ko,vr.keys=uf,vr.keysIn=of,vr.map=Ho,vr.mapKeys=function(t,n){var e={};return n=Bu(n,3),Yr(t,function(t,r,i){Nr(e,n(t,r,i),t)}),e},vr.mapValues=function(t,n){var e={};return n=Bu(n,3),Yr(t,function(t,r,i){Nr(e,r,n(t,r,i))}),e},vr.matches=function(t){return vi(Br(t,h))},vr.matchesProperty=function(t,n){return di(t,Br(n,h))},vr.memoize=aa,vr.merge=af,vr.mergeWith=ff,vr.method=Nf,vr.methodOf=Mf,vr.mixin=Tf,vr.negate=fa,vr.nthArg=function(t){return t=Da(t),Ri(function(n){return _i(n,t)})},vr.omit=lf,vr.omitBy=function(t,n){return sf(t,fa(Bu(n)))},vr.once=function(t){return na(2,t)},vr.orderBy=function(t,n,e,r){return null==t?[]:(_a(n)||(n=null==n?[]:[n]),_a(e=r?u:e)||(e=null==e?[]:[e]),yi(t,n,e))},vr.over=Pf,vr.overArgs=la,vr.overEvery=zf,vr.overSome=Uf,vr.partial=ca,vr.partialRight=sa,vr.partition=Jo,vr.pick=cf,vr.pickBy=sf,vr.property=Wf,vr.propertyOf=function(t){return function(n){return null==t?u:Jr(t,n)}},vr.pull=Ro,vr.pullAll=Eo,vr.pullAllBy=function(t,n,e){return t&&t.length&&n&&n.length?mi(t,n,Bu(e,2)):t},vr.pullAllWith=function(t,n,e){return t&&t.length&&n&&n.length?mi(t,n,u,e):t},vr.pullAt=Co,vr.range=Df,vr.rangeRight=Ff,vr.rearg=ha,vr.reject=function(t,n){return(_a(t)?Jn:$r)(t,fa(Bu(n,3)))},vr.remove=function(t,n){var e=[];if(!t||!t.length)return e;var r=-1,i=[],u=t.length;for(n=Bu(n,3);++r<u;){var o=t[r];n(o,r,t)&&(e.push(o),i.push(r))}return xi(t,i),e},vr.rest=function(t,n){if("function"!=typeof t)throw new un(f);return Ri(t,n=n===u?n:Da(n))},vr.reverse=Oo,vr.sampleSize=function(t,n,e){return n=(e?Zu(t,n,e):n===u)?1:Da(n),(_a(t)?Cr:Ci)(t,n)},vr.set=function(t,n,e){return null==t?t:Oi(t,n,e)},vr.setWith=function(t,n,e,r){return r="function"==typeof r?r:u,null==t?t:Oi(t,n,e,r)},vr.shuffle=function(t){return(_a(t)?Or:ji)(t)},vr.slice=function(t,n,e){var r=null==t?0:t.length;return r?(e&&"number"!=typeof e&&Zu(t,n,e)?(n=0,e=r):(n=null==n?0:Da(n),e=e===u?r:Da(e)),Li(t,n,e)):[]},vr.sortBy=Xo,vr.sortedUniq=function(t){return t&&t.length?Ti(t):[]},vr.sortedUniqBy=function(t,n){return t&&t.length?Ti(t,Bu(n,2)):[]},vr.split=function(t,n,e){return e&&"number"!=typeof e&&Zu(t,n,e)&&(n=e=u),(e=e===u?P:e>>>0)?(t=Ga(t))&&("string"==typeof n||null!=n&&!ka(n))&&!(n=Pi(n))&&Ee(t)?Ki(Ne(t),0,e):t.split(n,e):[]},vr.spread=function(t,n){if("function"!=typeof t)throw new un(f);return n=null==n?0:Ve(Da(n),0),Ri(function(e){var r=e[n],i=Ki(e,0,n);return r&&ne(i,r),Vn(t,this,i)})},vr.tail=function(t){var n=null==t?0:t.length;return n?Li(t,1,n):[]},vr.take=function(t,n,e){return t&&t.length?Li(t,0,(n=e||n===u?1:Da(n))<0?0:n):[]},vr.takeRight=function(t,n,e){var r=null==t?0:t.length;return r?Li(t,(n=r-(n=e||n===u?1:Da(n)))<0?0:n,r):[]},vr.takeRightWhile=function(t,n){return t&&t.length?Di(t,Bu(n,3),!1,!0):[]},vr.takeWhile=function(t,n){return t&&t.length?Di(t,Bu(n,3)):[]},vr.tap=function(t,n){return n(t),t},vr.throttle=function(t,n,e){var r=!0,i=!0;if("function"!=typeof t)throw new un(f);return Oa(e)&&(r="leading"in e?!!e.leading:r,i="trailing"in e?!!e.trailing:i),ia(t,n,{leading:r,maxWait:n,trailing:i})},vr.thru=Wo,vr.toArray=Ua,vr.toPairs=hf,vr.toPairsIn=pf,vr.toPath=function(t){return _a(t)?te(t,lo):Ta(t)?[t]:ru(fo(Ga(t)))},vr.toPlainObject=$a,vr.transform=function(t,n,e){var r=_a(t),i=r||xa(t)||Ba(t);if(n=Bu(n,4),null==e){var u=t&&t.constructor;e=i?r?new u:[]:Oa(t)&&Ra(u)?dr(kn(t)):{}}return(i?Yn:Yr)(t,function(t,r,i){return n(e,t,r,i)}),e},vr.unary=function(t){return ta(t,1)},vr.union=Ao,vr.unionBy=So,vr.unionWith=jo,vr.uniq=function(t){return t&&t.length?zi(t):[]},vr.uniqBy=function(t,n){return t&&t.length?zi(t,Bu(n,2)):[]},vr.uniqWith=function(t,n){return n="function"==typeof n?n:u,t&&t.length?zi(t,u,n):[]},vr.unset=function(t,n){return null==t||Ui(t,n)},vr.unzip=Lo,vr.unzipWith=ko,vr.update=function(t,n,e){return null==t?t:Wi(t,n,Vi(e))},vr.updateWith=function(t,n,e,r){return r="function"==typeof r?r:u,null==t?t:Wi(t,n,Vi(e),r)},vr.values=vf,vr.valuesIn=function(t){return null==t?[]:ye(t,of(t))},vr.without=No,vr.words=Ef,vr.wrap=function(t,n){return ca(Vi(n),t)},vr.xor=Mo,vr.xorBy=To,vr.xorWith=Bo,vr.zip=Po,vr.zipObject=function(t,n){return $i(t||[],n||[],Sr)},vr.zipObjectDeep=function(t,n){return $i(t||[],n||[],Oi)},vr.zipWith=zo,vr.entries=hf,vr.entriesIn=pf,vr.extend=Za,vr.extendWith=Ya,Tf(vr,vr),vr.add=Gf,vr.attempt=Cf,vr.camelCase=df,vr.capitalize=gf,vr.ceil=Vf,vr.clamp=function(t,n,e){return e===u&&(e=n,n=u),e!==u&&(e=(e=qa(e))==e?e:0),n!==u&&(n=(n=qa(n))==n?n:0),Tr(qa(t),n,e)},vr.clone=function(t){return Br(t,v)},vr.cloneDeep=function(t){return Br(t,h|v)},vr.cloneDeepWith=function(t,n){return Br(t,h|v,n="function"==typeof n?n:u)},vr.cloneWith=function(t,n){return Br(t,v,n="function"==typeof n?n:u)},vr.conformsTo=function(t,n){return null==n||Pr(t,n,uf(n))},vr.deburr=_f,vr.defaultTo=function(t,n){return null==t||t!=t?n:t},vr.divide=Zf,vr.endsWith=function(t,n,e){t=Ga(t),n=Pi(n);var r=t.length,i=e=e===u?r:Tr(Da(e),0,r);return(e-=n.length)>=0&&t.slice(e,i)==n},vr.eq=pa,vr.escape=function(t){return(t=Ga(t))&&Et.test(t)?t.replace(It,Ie):t},vr.escapeRegExp=function(t){return(t=Ga(t))&&Nt.test(t)?t.replace(kt,"\\$&"):t},vr.every=function(t,n,e){var r=_a(t)?Hn:Fr;return e&&Zu(t,n,e)&&(n=u),r(t,Bu(n,3))},vr.find=qo,vr.findIndex=go,vr.findKey=function(t,n){return oe(t,Bu(n,3),Yr)},vr.findLast=$o,vr.findLastIndex=_o,vr.findLastKey=function(t,n){return oe(t,Bu(n,3),Kr)},vr.floor=Yf,vr.forEach=Go,vr.forEachRight=Vo,vr.forIn=function(t,n){return null==t?t:Vr(t,Bu(n,3),of)},vr.forInRight=function(t,n){return null==t?t:Zr(t,Bu(n,3),of)},vr.forOwn=function(t,n){return t&&Yr(t,Bu(n,3))},vr.forOwnRight=function(t,n){return t&&Kr(t,Bu(n,3))},vr.get=Qa,vr.gt=va,vr.gte=da,vr.has=function(t,n){return null!=t&&qu(t,n,ni)},vr.hasIn=tf,vr.head=bo,vr.identity=Lf,vr.includes=function(t,n,e,r){t=ba(t)?t:vf(t),e=e&&!r?Da(e):0;var i=t.length;return e<0&&(e=Ve(i+e,0)),Ma(t)?e<=i&&t.indexOf(n,e)>-1:!!i&&fe(t,n,e)>-1},vr.indexOf=function(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=null==e?0:Da(e);return i<0&&(i=Ve(r+i,0)),fe(t,n,i)},vr.inRange=function(t,n,e){return n=Wa(n),e===u?(e=n,n=0):e=Wa(e),function(t,n,e){return t>=Ze(n,e)&&t<Ve(n,e)}(t=qa(t),n,e)},vr.invoke=rf,vr.isArguments=ga,vr.isArray=_a,vr.isArrayBuffer=ya,vr.isArrayLike=ba,vr.isArrayLikeObject=ma,vr.isBoolean=function(t){return!0===t||!1===t||Aa(t)&&Qr(t)==$},vr.isBuffer=xa,vr.isDate=wa,vr.isElement=function(t){return Aa(t)&&1===t.nodeType&&!La(t)},vr.isEmpty=function(t){if(null==t)return!0;if(ba(t)&&(_a(t)||"string"==typeof t||"function"==typeof t.splice||xa(t)||Ba(t)||ga(t)))return!t.length;var n=Fu(t);if(n==H||n==et)return!t.size;if(Ju(t))return!ci(t).length;for(var e in t)if(sn.call(t,e))return!1;return!0},vr.isEqual=function(t,n){return oi(t,n)},vr.isEqualWith=function(t,n,e){var r=(e="function"==typeof e?e:u)?e(t,n):u;return r===u?oi(t,n,u,e):!!r},vr.isError=Ia,vr.isFinite=function(t){return"number"==typeof t&&qe(t)},vr.isFunction=Ra,vr.isInteger=Ea,vr.isLength=Ca,vr.isMap=Sa,vr.isMatch=function(t,n){return t===n||ai(t,n,zu(n))},vr.isMatchWith=function(t,n,e){return e="function"==typeof e?e:u,ai(t,n,zu(n),e)},vr.isNaN=function(t){return ja(t)&&t!=+t},vr.isNative=function(t){if(Hu(t))throw new Xt(a);return fi(t)},vr.isNil=function(t){return null==t},vr.isNull=function(t){return null===t},vr.isNumber=ja,vr.isObject=Oa,vr.isObjectLike=Aa,vr.isPlainObject=La,vr.isRegExp=ka,vr.isSafeInteger=function(t){return Ea(t)&&t>=-M&&t<=M},vr.isSet=Na,vr.isString=Ma,vr.isSymbol=Ta,vr.isTypedArray=Ba,vr.isUndefined=function(t){return t===u},vr.isWeakMap=function(t){return Aa(t)&&Fu(t)==ot},vr.isWeakSet=function(t){return Aa(t)&&Qr(t)==at},vr.join=function(t,n){return null==t?"":$e.call(t,n)},vr.kebabCase=yf,vr.last=Io,vr.lastIndexOf=function(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=r;return e!==u&&(i=(i=Da(e))<0?Ve(r+i,0):Ze(i,r-1)),n==n?function(t,n,e){for(var r=e+1;r--;)if(t[r]===n)return r;return r}(t,n,i):ae(t,ce,i,!0)},vr.lowerCase=bf,vr.lowerFirst=mf,vr.lt=Pa,vr.lte=za,vr.max=function(t){return t&&t.length?qr(t,Lf,ti):u},vr.maxBy=function(t,n){return t&&t.length?qr(t,Bu(n,2),ti):u},vr.mean=function(t){return se(t,Lf)},vr.meanBy=function(t,n){return se(t,Bu(n,2))},vr.min=function(t){return t&&t.length?qr(t,Lf,hi):u},vr.minBy=function(t,n){return t&&t.length?qr(t,Bu(n,2),hi):u},vr.stubArray=qf,vr.stubFalse=$f,vr.stubObject=function(){return{}},vr.stubString=function(){return""},vr.stubTrue=function(){return!0},vr.multiply=Hf,vr.nth=function(t,n){return t&&t.length?_i(t,Da(n)):u},vr.noConflict=function(){return Mn._===this&&(Mn._=gn),this},vr.noop=Bf,vr.now=Qo,vr.pad=function(t,n,e){t=Ga(t);var r=(n=Da(n))?ke(t):0;if(!n||r>=n)return t;var i=(n-r)/2;return yu(We(i),e)+t+yu(Ue(i),e)},vr.padEnd=function(t,n,e){t=Ga(t);var r=(n=Da(n))?ke(t):0;return n&&r<n?t+yu(n-r,e):t},vr.padStart=function(t,n,e){t=Ga(t);var r=(n=Da(n))?ke(t):0;return n&&r<n?yu(n-r,e)+t:t},vr.parseInt=function(t,n,e){return e||null==n?n=0:n&&(n=+n),Ke(Ga(t).replace(Tt,""),n||0)},vr.random=function(t,n,e){if(e&&"boolean"!=typeof e&&Zu(t,n,e)&&(n=e=u),e===u&&("boolean"==typeof n?(e=n,n=u):"boolean"==typeof t&&(e=t,t=u)),t===u&&n===u?(t=0,n=1):(t=Wa(t),n===u?(n=t,t=0):n=Wa(n)),t>n){var r=t;t=n,n=r}if(e||t%1||n%1){var i=He();return Ze(t+i*(n-t+jn("1e-"+((i+"").length-1))),n)}return wi(t,n)},vr.reduce=function(t,n,e){var r=_a(t)?ee:ve,i=arguments.length<3;return r(t,Bu(n,4),e,i,Wr)},vr.reduceRight=function(t,n,e){var r=_a(t)?re:ve,i=arguments.length<3;return r(t,Bu(n,4),e,i,Dr)},vr.repeat=function(t,n,e){return n=(e?Zu(t,n,e):n===u)?1:Da(n),Ii(Ga(t),n)},vr.replace=function(){var t=arguments,n=Ga(t[0]);return t.length<3?n:n.replace(t[1],t[2])},vr.result=function(t,n,e){var r=-1,i=(n=Zi(n,t)).length;for(i||(i=1,t=u);++r<i;){var o=null==t?u:t[lo(n[r])];o===u&&(r=i,o=e),t=Ra(o)?o.call(t):o}return t},vr.round=Jf,vr.runInContext=t,vr.sample=function(t){return(_a(t)?Er:Ei)(t)},vr.size=function(t){if(null==t)return 0;if(ba(t))return Ma(t)?ke(t):t.length;var n=Fu(t);return n==H||n==et?t.size:ci(t).length},vr.snakeCase=xf,vr.some=function(t,n,e){var r=_a(t)?ie:ki;return e&&Zu(t,n,e)&&(n=u),r(t,Bu(n,3))},vr.sortedIndex=function(t,n){return Ni(t,n)},vr.sortedIndexBy=function(t,n,e){return Mi(t,n,Bu(e,2))},vr.sortedIndexOf=function(t,n){var e=null==t?0:t.length;if(e){var r=Ni(t,n);if(r<e&&pa(t[r],n))return r}return-1},vr.sortedLastIndex=function(t,n){return Ni(t,n,!0)},vr.sortedLastIndexBy=function(t,n,e){return Mi(t,n,Bu(e,2),!0)},vr.sortedLastIndexOf=function(t,n){if(null!=t&&t.length){var e=Ni(t,n,!0)-1;if(pa(t[e],n))return e}return-1},vr.startCase=wf,vr.startsWith=function(t,n,e){return t=Ga(t),e=null==e?0:Tr(Da(e),0,t.length),n=Pi(n),t.slice(e,e+n.length)==n},vr.subtract=Xf,vr.sum=function(t){return t&&t.length?de(t,Lf):0},vr.sumBy=function(t,n){return t&&t.length?de(t,Bu(n,2)):0},vr.template=function(t,n,e){var r=vr.templateSettings;e&&Zu(t,n,e)&&(n=u),t=Ga(t),n=Ya({},n,r,Cu);var i,o,a=Ya({},n.imports,r.imports,Cu),f=uf(a),l=ye(a,f),c=0,s=n.interpolate||Ht,h="__p += '",p=en((n.escape||Ht).source+"|"+s.source+"|"+(s===At?Ft:Ht).source+"|"+(n.evaluate||Ht).source+"|$","g"),v="//# sourceURL="+("sourceURL"in n?n.sourceURL:"lodash.templateSources["+ ++Cn+"]")+"\n";t.replace(p,function(n,e,r,u,a,f){return r||(r=u),h+=t.slice(c,f).replace(Jt,Re),e&&(i=!0,h+="' +\n__e("+e+") +\n'"),a&&(o=!0,h+="';\n"+a+";\n__p += '"),r&&(h+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),c=f+n.length,n}),h+="';\n";var d=n.variable;d||(h="with (obj) {\n"+h+"\n}\n"),h=(o?h.replace(bt,""):h).replace(mt,"$1").replace(xt,"$1;"),h="function("+(d||"obj")+") {\n"+(d?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(o?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var g=Cf(function(){return Qt(f,v+"return "+h).apply(u,l)});if(g.source=h,Ia(g))throw g;return g},vr.times=function(t,n){if((t=Da(t))<1||t>M)return[];var e=P,r=Ze(t,P);n=Bu(n),t-=P;for(var i=ge(r,n);++e<t;)n(e);return i},vr.toFinite=Wa,vr.toInteger=Da,vr.toLength=Fa,vr.toLower=function(t){return Ga(t).toLowerCase()},vr.toNumber=qa,vr.toSafeInteger=function(t){return t?Tr(Da(t),-M,M):0===t?t:0},vr.toString=Ga,vr.toUpper=function(t){return Ga(t).toUpperCase()},vr.trim=function(t,n,e){if((t=Ga(t))&&(e||n===u))return t.replace(Mt,"");if(!t||!(n=Pi(n)))return t;var r=Ne(t),i=Ne(n);return Ki(r,me(r,i),xe(r,i)+1).join("")},vr.trimEnd=function(t,n,e){if((t=Ga(t))&&(e||n===u))return t.replace(Bt,"");if(!t||!(n=Pi(n)))return t;var r=Ne(t);return Ki(r,0,xe(r,Ne(n))+1).join("")},vr.trimStart=function(t,n,e){if((t=Ga(t))&&(e||n===u))return t.replace(Tt,"");if(!t||!(n=Pi(n)))return t;var r=Ne(t);return Ki(r,me(r,Ne(n))).join("")},vr.truncate=function(t,n){var e=O,r=A;if(Oa(n)){var i="separator"in n?n.separator:i;e="length"in n?Da(n.length):e,r="omission"in n?Pi(n.omission):r}var o=(t=Ga(t)).length;if(Ee(t)){var a=Ne(t);o=a.length}if(e>=o)return t;var f=e-ke(r);if(f<1)return r;var l=a?Ki(a,0,f).join(""):t.slice(0,f);if(i===u)return l+r;if(a&&(f+=l.length-f),ka(i)){if(t.slice(f).search(i)){var c,s=l;for(i.global||(i=en(i.source,Ga(qt.exec(i))+"g")),i.lastIndex=0;c=i.exec(s);)var h=c.index;l=l.slice(0,h===u?f:h)}}else if(t.indexOf(Pi(i),f)!=f){var p=l.lastIndexOf(i);p>-1&&(l=l.slice(0,p))}return l+r},vr.unescape=function(t){return(t=Ga(t))&&Rt.test(t)?t.replace(wt,Me):t},vr.uniqueId=function(t){var n=++hn;return Ga(t)+n},vr.upperCase=If,vr.upperFirst=Rf,vr.each=Go,vr.eachRight=Vo,vr.first=bo,Tf(vr,(Kf={},Yr(vr,function(t,n){sn.call(vr.prototype,n)||(Kf[n]=t)}),Kf),{chain:!1}),vr.VERSION="4.17.10",Yn(["bind","bindKey","curry","curryRight","partial","partialRight"],function(t){vr[t].placeholder=vr}),Yn(["drop","take"],function(t,n){yr.prototype[t]=function(e){e=e===u?1:Ve(Da(e),0);var r=this.__filtered__&&!n?new yr(this):this.clone();return r.__filtered__?r.__takeCount__=Ze(e,r.__takeCount__):r.__views__.push({size:Ze(e,P),type:t+(r.__dir__<0?"Right":"")}),r},yr.prototype[t+"Right"]=function(n){return this.reverse()[t](n).reverse()}}),Yn(["filter","map","takeWhile"],function(t,n){var e=n+1,r=e==L||3==e;yr.prototype[t]=function(t){var n=this.clone();return n.__iteratees__.push({iteratee:Bu(t,3),type:e}),n.__filtered__=n.__filtered__||r,n}}),Yn(["head","last"],function(t,n){var e="take"+(n?"Right":"");yr.prototype[t]=function(){return this[e](1).value()[0]}}),Yn(["initial","tail"],function(t,n){var e="drop"+(n?"":"Right");yr.prototype[t]=function(){return this.__filtered__?new yr(this):this[e](1)}}),yr.prototype.compact=function(){return this.filter(Lf)},yr.prototype.find=function(t){return this.filter(t).head()},yr.prototype.findLast=function(t){return this.reverse().find(t)},yr.prototype.invokeMap=Ri(function(t,n){return"function"==typeof t?new yr(this):this.map(function(e){return ii(e,t,n)})}),yr.prototype.reject=function(t){return this.filter(fa(Bu(t)))},yr.prototype.slice=function(t,n){t=Da(t);var e=this;return e.__filtered__&&(t>0||n<0)?new yr(e):(t<0?e=e.takeRight(-t):t&&(e=e.drop(t)),n!==u&&(e=(n=Da(n))<0?e.dropRight(-n):e.take(n-t)),e)},yr.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},yr.prototype.toArray=function(){return this.take(P)},Yr(yr.prototype,function(t,n){var e=/^(?:filter|find|map|reject)|While$/.test(n),r=/^(?:head|last)$/.test(n),i=vr[r?"take"+("last"==n?"Right":""):n],o=r||/^find/.test(n);i&&(vr.prototype[n]=function(){var n=this.__wrapped__,a=r?[1]:arguments,f=n instanceof yr,l=a[0],c=f||_a(n),s=function(t){var n=i.apply(vr,ne([t],a));return r&&h?n[0]:n};c&&e&&"function"==typeof l&&1!=l.length&&(f=c=!1);var h=this.__chain__,p=!!this.__actions__.length,v=o&&!h,d=f&&!p;if(!o&&c){n=d?n:new yr(this);var g=t.apply(n,a);return g.__actions__.push({func:Wo,args:[s],thisArg:u}),new _r(g,h)}return v&&d?t.apply(this,a):(g=this.thru(s),v?r?g.value()[0]:g.value():g)})}),Yn(["pop","push","shift","sort","splice","unshift"],function(t){var n=on[t],e=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);vr.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var i=this.value();return n.apply(_a(i)?i:[],t)}return this[e](function(e){return n.apply(_a(e)?e:[],t)})}}),Yr(yr.prototype,function(t,n){var e=vr[n];if(e){var r=e.name+"";(ur[r]||(ur[r]=[])).push({name:n,func:e})}}),ur[vu(u,y).name]=[{name:"wrapper",func:u}],yr.prototype.clone=function(){var t=new yr(this.__wrapped__);return t.__actions__=ru(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=ru(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=ru(this.__views__),t},yr.prototype.reverse=function(){if(this.__filtered__){var t=new yr(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},yr.prototype.value=function(){var t=this.__wrapped__.value(),n=this.__dir__,e=_a(t),r=n<0,i=e?t.length:0,u=function(t,n,e){for(var r=-1,i=e.length;++r<i;){var u=e[r],o=u.size;switch(u.type){case"drop":t+=o;break;case"dropRight":n-=o;break;case"take":n=Ze(n,t+o);break;case"takeRight":t=Ve(t,n-o)}}return{start:t,end:n}}(0,i,this.__views__),o=u.start,a=u.end,f=a-o,l=r?a:o-1,c=this.__iteratees__,s=c.length,h=0,p=Ze(f,this.__takeCount__);if(!e||!r&&i==f&&p==f)return Fi(t,this.__actions__);var v=[];t:for(;f--&&h<p;){for(var d=-1,g=t[l+=n];++d<s;){var _=c[d],y=_.iteratee,b=_.type,m=y(g);if(b==k)g=m;else if(!m){if(b==L)continue t;break t}}v[h++]=g}return v},vr.prototype.at=Do,vr.prototype.chain=function(){return Uo(this)},vr.prototype.commit=function(){return new _r(this.value(),this.__chain__)},vr.prototype.next=function(){this.__values__===u&&(this.__values__=Ua(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?u:this.__values__[this.__index__++]}},vr.prototype.plant=function(t){for(var n,e=this;e instanceof gr;){var r=so(e);r.__index__=0,r.__values__=u,n?i.__wrapped__=r:n=r;var i=r;e=e.__wrapped__}return i.__wrapped__=t,n},vr.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof yr){var n=t;return this.__actions__.length&&(n=new yr(this)),(n=n.reverse()).__actions__.push({func:Wo,args:[Oo],thisArg:u}),new _r(n,this.__chain__)}return this.thru(Oo)},vr.prototype.toJSON=vr.prototype.valueOf=vr.prototype.value=function(){return Fi(this.__wrapped__,this.__actions__)},vr.prototype.first=vr.prototype.head,Un&&(vr.prototype[Un]=function(){return this}),vr}();Mn._=Te,(i=function(){return Te}.call(n,e,n,r))===u||(r.exports=i)}).call(this)}).call(this,e(21),e(20)(t))},function(t,n){t.exports=function(t,n,e){return(t[0]-e[0])*(n[1]-e[1])-(n[0]-e[0])*(t[1]-e[1])}},function(t,n){t.exports=function(t,n){return t[0]===n[0]&&t[1]===n[1]}},function(t,n,e){var r=e(1);t.exports=function(t,n){var e=t.point,i=n.point;return e[0]>i[0]?1:e[0]<i[0]?-1:e[1]!==i[1]?e[1]>i[1]?1:-1:function(t,n,e,i){if(t.left!==n.left)return t.left?1:-1;if(0!==r(e,t.otherEvent.point,n.otherEvent.point))return t.isBelow(n.otherEvent.point)?-1:1;return!t.isSubject&&n.isSubject?1:-1}(t,n,e)}},function(t,n){function e(){}function r(t){this._tree=t,this._ancestors=[],this._cursor=null}e.prototype.clear=function(){this._root=null,this.size=0},e.prototype.find=function(t){for(var n=this._root;null!==n;){var e=this._comparator(t,n.data);if(0===e)return n.data;n=n.get_child(e>0)}return null},e.prototype.findIter=function(t){for(var n=this._root,e=this.iterator();null!==n;){var r=this._comparator(t,n.data);if(0===r)return e._cursor=n,e;e._ancestors.push(n),n=n.get_child(r>0)}return null},e.prototype.lowerBound=function(t){for(var n=this._root,e=this.iterator(),r=this._comparator;null!==n;){var i=r(t,n.data);if(0===i)return e._cursor=n,e;e._ancestors.push(n),n=n.get_child(i>0)}for(var u=e._ancestors.length-1;u>=0;--u)if(r(t,(n=e._ancestors[u]).data)<0)return e._cursor=n,e._ancestors.length=u,e;return e._ancestors.length=0,e},e.prototype.upperBound=function(t){for(var n=this.lowerBound(t),e=this._comparator;null!==n.data()&&0===e(n.data(),t);)n.next();return n},e.prototype.min=function(){var t=this._root;if(null===t)return null;for(;null!==t.left;)t=t.left;return t.data},e.prototype.max=function(){var t=this._root;if(null===t)return null;for(;null!==t.right;)t=t.right;return t.data},e.prototype.iterator=function(){return new r(this)},e.prototype.each=function(t){for(var n,e=this.iterator();null!==(n=e.next());)if(!1===t(n))return},e.prototype.reach=function(t){for(var n,e=this.iterator();null!==(n=e.prev());)if(!1===t(n))return},r.prototype.data=function(){return null!==this._cursor?this._cursor.data:null},r.prototype.next=function(){if(null===this._cursor){var t=this._tree._root;null!==t&&this._minNode(t)}else{var n;if(null===this._cursor.right)do{if(n=this._cursor,!this._ancestors.length){this._cursor=null;break}this._cursor=this._ancestors.pop()}while(this._cursor.right===n);else this._ancestors.push(this._cursor),this._minNode(this._cursor.right)}return null!==this._cursor?this._cursor.data:null},r.prototype.prev=function(){if(null===this._cursor){var t=this._tree._root;null!==t&&this._maxNode(t)}else{var n;if(null===this._cursor.left)do{if(n=this._cursor,!this._ancestors.length){this._cursor=null;break}this._cursor=this._ancestors.pop()}while(this._cursor.left===n);else this._ancestors.push(this._cursor),this._maxNode(this._cursor.left)}return null!==this._cursor?this._cursor.data:null},r.prototype._minNode=function(t){for(;null!==t.left;)this._ancestors.push(t),t=t.left;this._cursor=t},r.prototype._maxNode=function(t){for(;null!==t.right;)this._ancestors.push(t),t=t.right;this._cursor=t},t.exports=e},function(t,n){t.exports={NORMAL:0,NON_CONTRIBUTING:1,SAME_TRANSITION:2,DIFFERENT_TRANSITION:3}},function(t,n,e){var r=e(19),i=e(18),u=e(9),o=u.isArray,a=u.equals,f=u.orientRings;function l(t,n){this.vertices=null,this.edges=null,this._closed=!1,this._distance=0,t&&this.data(t),this._arcSegments=void 0!==n?n:5}l.prototype.data=function(t){if(this._edges=[],!o(t))throw new Error("Offset requires at least one coodinate to work with");return o(t)&&"number"==typeof t[0]?this.vertices=t:(this.vertices=f(t),this._processContour(this.vertices,this._edges)),this},l.prototype._processContour=function(t,n){var e,i;if(o(t[0])&&"number"==typeof t[0][0])for(i=t.length,a(t[0],t[i-1])&&(i-=1),e=0;e<i;e++)n.push(new r(t[e],t[(e+1)%i]));else for(e=0,i=t.length;e<i;e++)n.push([]),this._processContour(t[e],n[n.length-1])},l.prototype.arcSegments=function(t){return this._arcSegments=t,this},l.prototype.validate=function(t){var n=t.length;return"number"==typeof t[0]?[t]:(t[0][0]===t[n-1][0]&&t[0][1]===t[n-1][1]&&n>1&&(t=t.slice(0,n-1),this._closed=!0),t)},l.prototype.createArc=function(t,n,e,r,i,u,o){var a=2*Math.PI,f=Math.atan2(r[1]-n[1],r[0]-n[0]),l=Math.atan2(i[1]-n[1],i[0]-n[0]);u%2==0&&(u-=1),f<0&&(f+=a),l<0&&(l+=a);var c=f>l?f-l:f+a-l,s=(o?-c:a-c)/u;t.push(r);for(var h=1;h<u;++h)c=f+s*h,t.push([n[0]+Math.cos(c)*e,n[1]+Math.sin(c)*e]);return t.push(i),t},l.prototype.distance=function(t,n){return this._distance=t||0,this},l.degreesToUnits=function(t,n){switch(n){case"miles":t/=69.047;break;case"feet":t/=364568;break;case"kilometers":t/=111.12;break;case"meters":case"metres":t/=111120}return t},l.prototype.ensureLastPoint=function(t){return a(t[0],t[t.length-1])||t.push([t[0][0],t[0][1]]),t},l.prototype.offset=function(t){return this.distance(t),0===this._distance?this.vertices:this._distance>0?this.margin(this._distance):this.padding(-this._distance)},l.prototype._offsetSegment=function(t,n,e,r){for(var i=[],u=[e.offset(e._inNormal[0]*r,e._inNormal[1]*r),e.inverseOffset(e._outNormal[0]*r,e._outNormal[1]*r)],o=0;o<2;o++){var a=u[o],f=u[(o+2-1)%2];this.createArc(i,0===o?t:n,r,f.next,a.current,this._arcSegments,!0)}return i},l.prototype.margin=function(t){if(this.distance(t),"number"==typeof this.vertices[0])return this.offsetPoint(this._distance);if(0===t)return this.vertices;var n=this.offsetLines(this._distance);return n=i.union(this.vertices,n),f(n)},l.prototype.padding=function(t){if(this.distance(t),0===this._distance)return this.ensureLastPoint(this.vertices);if(2===this.vertices.length&&"number"==typeof this.vertices[0])return this.vertices;var n=this.offsetLines(this._distance),e=i.diff(this.vertices,n);return f(e)},l.prototype.offsetLine=function(t){return 0===t?this.vertices:f(this.offsetLines(t))},l.prototype.offsetLines=function(t){if(t<0)throw new Error("Cannot apply negative margin to the line");var n;if(this.distance(t),o(this.vertices[0])&&"number"!=typeof this.vertices[0][0])for(var e=0,r=this._edges.length;e<r;e++)n=0===e?this.offsetContour(this.vertices[e],this._edges[e]):i.union(n,this.offsetContour(this.vertices[e],this._edges[e]));else n=1===this.vertices.length?this.offsetPoint():this.offsetContour(this.vertices,this._edges);return n},l.prototype.offsetContour=function(t,n){var e,r,u;if(o(t[0])&&"number"==typeof t[0][0])for(r=0,u=t.length-1;r<u;r++){var a=this.ensureLastPoint(this._offsetSegment(t[r],t[r+1],n[r],this._distance));e=0===r?[this.ensureLastPoint(a)]:i.union(e,this.ensureLastPoint(a))}else for(r=0,u=n.length;r<u;r++)e=0===r?this.offsetContour(t[r],n[r]):i.union(e,this.offsetContour(t[r],n[r]));return e},l.prototype.offsetPoint=function(t){this.distance(t);var n=2*this._arcSegments,e=[],r=this.vertices,i=this._distance,u=0;n%2==0&&n++;for(var o=0;o<n;o++)u+=2*Math.PI/n,e.push([r[0]+i*Math.cos(u),r[1]+i*Math.sin(u)]);return f([this.ensureLastPoint(e)])},l.orientRings=f,t.exports=l},function(t,n){t.exports=function(t,n,e,r,i,u){var o,a,f,l,c=e.length,s=e[0].length;if(n<1)throw new Error("degree must be at least 1 (linear)");if(n>c-1)throw new Error("degree must be less than or equal to point count - 1");if(!i)for(i=[],o=0;o<c;o++)i[o]=1;if(r){if(r.length!==c+n+1)throw new Error("bad knot vector length")}else for(r=[],o=0;o<c+n+1;o++)r[o]=o;var h=[n,r.length-1-n],p=r[h[0]],v=r[h[1]];if((t=t*(v-p)+p)<p||t>v)throw new Error("out of bounds");for(f=h[0];f<h[1]&&!(t>=r[f]&&t<=r[f+1]);f++);var d,g=[];for(o=0;o<c;o++){for(g[o]=[],a=0;a<s;a++)g[o][a]=e[o][a]*i[o];g[o][s]=i[o]}for(l=1;l<=n+1;l++)for(o=f;o>f-n-1+l;o--)for(d=(t-r[o])/(r[o+n+1-l]-r[o]),a=0;a<s+1;a++)g[o][a]=(1-d)*g[o-1][a]+d*g[o][a];for(u=u||[],o=0;o<s;o++)u[o]=g[f][o]/g[f][s];return u}},function(t,n,e){"use strict";e.r(n);var r={};e.r(r),e.d(r,"setup",function(){return rt}),e.d(r,"draw",function(){return it}),e.d(r,"mousePressed",function(){return ut});var i=function(t){return function(){return t}};function u(t){return t[0]}function o(t){return t[1]}function a(){this._=null}function f(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function l(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function c(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function s(t){for(;t.L;)t=t.L;return t}a.prototype={constructor:a,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=s(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(l(this,e),e=(t=e).U),e.C=!1,r.C=!0,c(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(c(this,e),e=(t=e).U),e.C=!1,r.C=!0,l(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,u=t.L,o=t.R;if(e=u?o?s(o):u:o,i?i.L===t?i.L=e:i.R=e:this._=e,u&&o?(r=e.C,e.C=t.C,e.L=u,u.U=e,e!==o?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=o,o.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,l(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,c(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,l(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,c(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,l(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,c(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var h=a;function p(t,n,e,r){var i=[null,null],u=T.push(i)-1;return i.left=t,i.right=n,e&&d(i,t,n,e),r&&d(i,n,t,r),N[t.index].halfedges.push(u),N[n.index].halfedges.push(u),i}function v(t,n,e){var r=[n,e];return r.left=t,r}function d(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function g(t,n,e,r,i){var u,o=t[0],a=t[1],f=o[0],l=o[1],c=0,s=1,h=a[0]-f,p=a[1]-l;if(u=n-f,h||!(u>0)){if(u/=h,h<0){if(u<c)return;u<s&&(s=u)}else if(h>0){if(u>s)return;u>c&&(c=u)}if(u=r-f,h||!(u<0)){if(u/=h,h<0){if(u>s)return;u>c&&(c=u)}else if(h>0){if(u<c)return;u<s&&(s=u)}if(u=e-l,p||!(u>0)){if(u/=p,p<0){if(u<c)return;u<s&&(s=u)}else if(p>0){if(u>s)return;u>c&&(c=u)}if(u=i-l,p||!(u<0)){if(u/=p,p<0){if(u>s)return;u>c&&(c=u)}else if(p>0){if(u<c)return;u<s&&(s=u)}return!(c>0||s<1)||(c>0&&(t[0]=[f+c*h,l+c*p]),s<1&&(t[1]=[f+s*h,l+s*p]),!0)}}}}}function _(t,n,e,r,i){var u=t[1];if(u)return!0;var o,a,f=t[0],l=t.left,c=t.right,s=l[0],h=l[1],p=c[0],v=c[1],d=(s+p)/2,g=(h+v)/2;if(v===h){if(d<n||d>=r)return;if(s>p){if(f){if(f[1]>=i)return}else f=[d,e];u=[d,i]}else{if(f){if(f[1]<e)return}else f=[d,i];u=[d,e]}}else if(a=g-(o=(s-p)/(v-h))*d,o<-1||o>1)if(s>p){if(f){if(f[1]>=i)return}else f=[(e-a)/o,e];u=[(i-a)/o,i]}else{if(f){if(f[1]<e)return}else f=[(i-a)/o,i];u=[(e-a)/o,e]}else if(h<v){if(f){if(f[0]>=r)return}else f=[n,o*n+a];u=[r,o*r+a]}else{if(f){if(f[0]<n)return}else f=[r,o*r+a];u=[n,o*n+a]}return t[0]=f,t[1]=u,!0}function y(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function b(t,n){return n[+(n.left!==t.site)]}function m(t,n){return n[+(n.left===t.site)]}var x,w=[];function I(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,u=e.site;if(r!==u){var o=i[0],a=i[1],l=r[0]-o,c=r[1]-a,s=u[0]-o,h=u[1]-a,p=2*(l*h-c*s);if(!(p>=-P)){var v=l*l+c*c,d=s*s+h*h,g=(h*v-c*d)/p,_=(l*d-s*v)/p,y=w.pop()||new function(){f(this),this.x=this.y=this.arc=this.site=this.cy=null};y.arc=t,y.site=i,y.x=g+o,y.y=(y.cy=_+a)+Math.sqrt(g*g+_*_),t.circle=y;for(var b=null,m=M._;m;)if(y.y<m.y||y.y===m.y&&y.x<=m.x){if(!m.L){b=m.P;break}m=m.L}else{if(!m.R){b=m;break}m=m.R}M.insert(b,y),b||(x=y)}}}}function R(t){var n=t.circle;n&&(n.P||(x=n.N),M.remove(n),w.push(n),f(n),t.circle=null)}var E=[];function C(t){var n=E.pop()||new function(){f(this),this.edge=this.site=this.circle=null};return n.site=t,n}function O(t){R(t),k.remove(t),E.push(t),f(t)}function A(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],u=t.P,o=t.N,a=[t];O(t);for(var f=u;f.circle&&Math.abs(e-f.circle.x)<B&&Math.abs(r-f.circle.cy)<B;)u=f.P,a.unshift(f),O(f),f=u;a.unshift(f),R(f);for(var l=o;l.circle&&Math.abs(e-l.circle.x)<B&&Math.abs(r-l.circle.cy)<B;)o=l.N,a.push(l),O(l),l=o;a.push(l),R(l);var c,s=a.length;for(c=1;c<s;++c)l=a[c],f=a[c-1],d(l.edge,f.site,l.site,i);f=a[0],(l=a[s-1]).edge=p(f.site,l.site,null,i),I(f),I(l)}function S(t){for(var n,e,r,i,u=t[0],o=t[1],a=k._;a;)if((r=j(a,o)-u)>B)a=a.L;else{if(!((i=u-L(a,o))>B)){r>-B?(n=a.P,e=a):i>-B?(n=a,e=a.N):n=e=a;break}if(!a.R){n=a;break}a=a.R}!function(t){N[t.index]={site:t,halfedges:[]}}(t);var f=C(t);if(k.insert(n,f),n||e){if(n===e)return R(n),e=C(n.site),k.insert(f,e),f.edge=e.edge=p(n.site,f.site),I(n),void I(e);if(e){R(n),R(e);var l=n.site,c=l[0],s=l[1],h=t[0]-c,v=t[1]-s,g=e.site,_=g[0]-c,y=g[1]-s,b=2*(h*y-v*_),m=h*h+v*v,x=_*_+y*y,w=[(y*m-v*x)/b+c,(h*x-_*m)/b+s];d(e.edge,l,g,w),f.edge=p(l,t,null,w),e.edge=p(t,g,null,w),I(n),I(e)}else f.edge=p(n.site,f.site)}}function j(t,n){var e=t.site,r=e[0],i=e[1],u=i-n;if(!u)return r;var o=t.P;if(!o)return-1/0;var a=(e=o.site)[0],f=e[1],l=f-n;if(!l)return a;var c=a-r,s=1/u-1/l,h=c/l;return s?(-h+Math.sqrt(h*h-2*s*(c*c/(-2*l)-f+l/2+i-u/2)))/s+r:(r+a)/2}function L(t,n){var e=t.N;if(e)return j(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var k,N,M,T,B=1e-6,P=1e-12;function z(t,n){return n[1]-t[1]||n[0]-t[0]}function U(t,n){var e,r,i,u=t.sort(z).pop();for(T=[],N=new Array(t.length),k=new h,M=new h;;)if(i=x,u&&(!i||u[1]<i.y||u[1]===i.y&&u[0]<i.x))u[0]===e&&u[1]===r||(S(u),e=u[0],r=u[1]),u=t.pop();else{if(!i)break;A(i.arc)}if(function(){for(var t,n,e,r,i=0,u=N.length;i<u;++i)if((t=N[i])&&(r=(n=t.halfedges).length)){var o=new Array(r),a=new Array(r);for(e=0;e<r;++e)o[e]=e,a[e]=y(t,T[n[e]]);for(o.sort(function(t,n){return a[n]-a[t]}),e=0;e<r;++e)a[e]=n[o[e]];for(e=0;e<r;++e)n[e]=a[e]}}(),n){var o=+n[0][0],a=+n[0][1],f=+n[1][0],l=+n[1][1];!function(t,n,e,r){for(var i,u=T.length;u--;)_(i=T[u],t,n,e,r)&&g(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>B||Math.abs(i[0][1]-i[1][1])>B)||delete T[u]}(o,a,f,l),function(t,n,e,r){var i,u,o,a,f,l,c,s,h,p,d,g,_=N.length,y=!0;for(i=0;i<_;++i)if(u=N[i]){for(o=u.site,a=(f=u.halfedges).length;a--;)T[f[a]]||f.splice(a,1);for(a=0,l=f.length;a<l;)d=(p=m(u,T[f[a]]))[0],g=p[1],s=(c=b(u,T[f[++a%l]]))[0],h=c[1],(Math.abs(d-s)>B||Math.abs(g-h)>B)&&(f.splice(a,0,T.push(v(o,p,Math.abs(d-t)<B&&r-g>B?[t,Math.abs(s-t)<B?h:r]:Math.abs(g-r)<B&&e-d>B?[Math.abs(h-r)<B?s:e,r]:Math.abs(d-e)<B&&g-n>B?[e,Math.abs(s-e)<B?h:n]:Math.abs(g-n)<B&&d-t>B?[Math.abs(h-n)<B?s:t,n]:null))-1),++l);l&&(y=!1)}if(y){var x,w,I,R=1/0;for(i=0,y=null;i<_;++i)(u=N[i])&&(I=(x=(o=u.site)[0]-t)*x+(w=o[1]-n)*w)<R&&(R=I,y=u);if(y){var E=[t,n],C=[t,r],O=[e,r],A=[e,n];y.halfedges.push(T.push(v(o=y.site,E,C))-1,T.push(v(o,C,O))-1,T.push(v(o,O,A))-1,T.push(v(o,A,E))-1)}}for(i=0;i<_;++i)(u=N[i])&&(u.halfedges.length||delete N[i])}(o,a,f,l)}this.edges=T,this.cells=N,k=M=T=N=null}U.prototype={constructor:U,polygons:function(){var t=this.edges;return this.cells.map(function(n){var e=n.halfedges.map(function(e){return b(n,t[e])});return e.data=n.site.data,e})},triangles:function(){var t=[],n=this.edges;return this.cells.forEach(function(e,r){if(u=(i=e.halfedges).length)for(var i,u,o,a,f,l,c=e.site,s=-1,h=n[i[u-1]],p=h.left===c?h.right:h.left;++s<u;)o=p,p=(h=n[i[s]]).left===c?h.right:h.left,o&&p&&r<o.index&&r<p.index&&(f=o,l=p,((a=c)[0]-l[0])*(f[1]-a[1])-(a[0]-f[0])*(l[1]-a[1])<0)&&t.push([c.data,o.data,p.data])}),t},links:function(){return this.edges.filter(function(t){return t.right}).map(function(t){return{source:t.left.data,target:t.right.data}})},find:function(t,n,e){for(var r,i,u=this,o=u._found||0,a=u.cells.length;!(i=u.cells[o]);)if(++o>=a)return null;var f=t-i.site[0],l=n-i.site[1],c=f*f+l*l;do{i=u.cells[r=o],o=null,i.halfedges.forEach(function(e){var r=u.edges[e],a=r.left;if(a!==i.site&&a||(a=r.right)){var f=t-a[0],l=n-a[1],s=f*f+l*l;s<c&&(c=s,o=a.index)}})}while(null!==o);return u._found=r,null==e||c<=e*e?i.site:null}};var W=function(){var t=u,n=o,e=null;function r(r){return new U(r.map(function(e,i){var u=[Math.round(t(e,i,r)/B)*B,Math.round(n(e,i,r)/B)*B];return u.index=i,u.data=e,u}),e)}return r.polygons=function(t){return r(t).polygons()},r.links=function(t){return r(t).links()},r.triangles=function(t){return r(t).triangles()},r.x=function(n){return arguments.length?(t="function"==typeof n?n:i(+n),r):t},r.y=function(t){return arguments.length?(n="function"==typeof t?t:i(+t),r):n},r.extent=function(t){return arguments.length?(e=null==t?null:[[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]],r):e&&[[e[0][0],e[0][1]],[e[1][0],e[1][1]]]},r.size=function(t){return arguments.length?(e=null==t?null:[[0,0],[+t[0],+t[1]]],r):e&&[e[1][0]-e[0][0],e[1][1]-e[0][1]]},r},D=e(0),F=e(7),q=function(t){for(var n,e,r=-1,i=t.length,u=0,o=0,a=t[i-1],f=0;++r<i;)n=a,a=t[r],f+=e=n[0]*a[1]-a[0]*n[1],u+=(n[0]+a[0])*e,o+=(n[1]+a[1])*e;return[u/(f*=3),o/f]};var $,G=e(6),V=e.n(G);!function(t){t[t.BASIC=0]="BASIC",t[t.ROAD=1]="ROAD",t[t.CITY=2]="CITY",t[t.DISTRICT=3]="DISTRICT"}($||($={}));var Z,Y,K=$;!function(t){t[t.cools=0]="cools",t[t.warms=1]="warms",t[t.neutrals=2]="neutrals",t[t.pinks=3]="pinks",t[t.purples=4]="purples",t[t.violets=5]="violets",t[t.blues=6]="blues",t[t.aquas=7]="aquas",t[t.greens=8]="greens",t[t.limes=9]="limes",t[t.yellows=10]="yellows",t[t.browns=11]="browns",t[t.oranges=12]="oranges",t[t.apricots=13]="apricots",t[t.reds=14]="reds"}(Z||(Z={})),function(t){t[t.black=0]="black",t[t.dark=1]="dark",t[t.mediumDark=2]="mediumDark",t[t.medium=3]="medium",t[t.mediumLight=4]="mediumLight",t[t.light=5]="light",t[t.white=6]="white"}(Y||(Y={}));const H=[[{red:.2117647,alpha:1,name:"BigStone",blue:.2745098,green:.254902,hex:"#364146"},{red:.2666667,alpha:1,name:"RiverBed",blue:.3372549,green:.3137255,hex:"#445056"},{red:.4666667,alpha:1,name:"RegentGray",blue:.5333334,green:.5137255,hex:"#778388"},{red:.6627451,alpha:1,name:"Casper",blue:.7294118,green:.7098039,hex:"#a9b5ba"},{red:.07058824,alpha:1,name:"Mirage",blue:.1372549,green:.1176471,hex:"#121e23"},{red:.8588235,alpha:1,name:"Tranquil",blue:.9254902,green:.9058824,hex:"#dbe7ec"},{red:.8980392,alpha:1,name:"AquaSqueeze",blue:.9647059,green:.945098,hex:"#e5f1f6"}],[{red:.1529412,alpha:1,name:"Oil",blue:.08235294,green:.1176471,hex:"#271e15"},{red:.2941177,alpha:1,name:"SpaceShuttle",blue:.2235294,green:.2627451,hex:"#4b4339"},{red:.34902,alpha:1,name:"Masala",blue:.28235,green:.31765,hex:"#595148"},{red:.5490196,alpha:1,name:"Schooner",blue:.4745098,green:.5137255,hex:"#8c8379"},{red:.7450981,alpha:1,name:"Tide",blue:.6745098,green:.7098039,hex:"#beb5ac"},{red:.9411765,alpha:1,name:"DesertStorm",blue:.8705882,green:.9098039,hex:"#f0e8de"},{red:.9803922,alpha:1,name:"WhiteLinen",blue:.9098039,green:.9490196,hex:"#faf2e8"}],[{red:.05882353,alpha:1,name:"Onyx",blue:.05882353,green:.05882353,hex:"#0f0f0f"},{red:.2156863,alpha:1,name:"Tuatara",blue:.2156863,green:.2156863,hex:"#373737"},{red:.2784314,alpha:1,name:"Charcoal",blue:.2784314,green:.2784314,hex:"#474747"},{red:.4980392,alpha:1,name:"Tin",blue:.4980392,green:.4980392,hex:"#7f7f7f"},{red:.7176471,alpha:1,name:"Loblolly",blue:.7176471,green:.7176471,hex:"#b7b7b7"},{red:.9372549,alpha:1,name:"Gallery",blue:.9372549,green:.9372549,hex:"#efefef"},{red:.9803922,alpha:1,name:"Alabaster",blue:.9803922,green:.9803922,hex:"#fafafa"}],[{red:.6313726,alpha:1,name:"RoyalHeath",blue:.5058824,green:.1960784,hex:"#a13281"},{red:.7450981,alpha:1,name:"Byzantine",blue:.6039216,green:.227451,hex:"#be3a9a"},{red:.827451,alpha:1,name:"DeepFuchsia",blue:.6862745,green:.3098039,hex:"#d34faf"},{red:.9333333,alpha:1,name:"NeonFuchsia",blue:.7568628,green:.2862745,hex:"#ee49c1"},{red:.945098,alpha:1,name:"RosePink",blue:.8039216,green:.427451,hex:"#f16dcd"},{red:.972549,alpha:1,name:"Chantilly",blue:.9019608,green:.7137255,hex:"#f8b6e6"},{red:.9882353,alpha:1,name:"PaleRose",blue:.9607843,green:.8862745,hex:"#fce2f5"}],[{red:.427451,alpha:1,name:"PurpleHeart",blue:.6117647,green:.2196078,hex:"#6d389c"},{red:.5058824,alpha:1,name:"Studio",blue:.7333333,green:.254902,hex:"#8141bb"},{red:.5843138,alpha:1,name:"Amethyst",blue:.8156863,green:.3333333,hex:"#9555d0"},{red:.6313726,alpha:1,name:"LavenderIndigo",blue:.9176471,green:.3176471,hex:"#a151ea"},{red:.7058824,alpha:1,name:"SoftPurple",blue:.9333333,green:.454902,hex:"#b474ee"},{red:.8509804,alpha:1,name:"Perfume",blue:.9686275,green:.7254902,hex:"#d9b9f7"},{red:.9411765,alpha:1,name:"BlueChalk",blue:.9882353,green:.8901961,hex:"#f0e3fc"}],[{red:.2392157,alpha:1,name:"DarkSlateBlue",blue:.5529412,green:.2470588,hex:"#3d3f8d"},{red:.282353,alpha:1,name:"GovernorBay",blue:.6627451,green:.2901961,hex:"#484aa9"},{red:.3607843,alpha:1,name:"BlueViolet",blue:.7411765,green:.372549,hex:"#5c5fbd"},{red:.3529412,alpha:1,name:"Iris",blue:.827451,green:.3647059,hex:"#5a5dd3"},{red:.4823529,alpha:1,name:"ChetwodeBlue",blue:.8627451,green:.4901961,hex:"#7b7ddc"},{red:.7411765,alpha:1,name:"Melrose",blue:.9294118,green:.7450981,hex:"#bdbeed"},{red:.8980392,alpha:1,name:"Lavender",blue:.972549,green:.8980392,hex:"#e5e5f8"}],[{red:.1294118,alpha:1,name:"Calypso",blue:.5647059,green:.4352941,hex:"#216f90"},{red:.145098,alpha:1,name:"Astral",blue:.6705883,green:.509804,hex:"#2582ab"},{red:.2235294,alpha:1,name:"BostonBlue",blue:.7529412,green:.5921569,hex:"#3997c0"},{red:.1803922,alpha:1,name:"CuriousBlue",blue:.8392157,green:.6392157,hex:"#2ea3d6"},{red:.345098,alpha:1,name:"Malibu",blue:.8705882,green:.7098039,hex:"#58b5de"},{red:.6705883,alpha:1,name:"NonPhotoBlue",blue:.9372549,green:.854902,hex:"#abdaef"},{red:.8666667,alpha:1,name:"PattensBlue",blue:.9764706,green:.9411765,hex:"#ddf0f9"}],[{red:.2078431,alpha:1,name:"Viridian",blue:.4156863,green:.5450981,hex:"#358b6a"},{red:.2352941,alpha:1,name:"OceanGreen",blue:.4784314,green:.6392157,hex:"#3ca37a"},{red:.3137255,alpha:1,name:"Mint",blue:.5607843,green:.7215686,hex:"#50b88f"},{red:.2941177,alpha:1,name:"Shamrock",blue:.6,green:.8,hex:"#4bcc99"},{red:.4352941,alpha:1,name:"MediumAquamarine",blue:.6784314,green:.8392157,hex:"#6fd6ad"},{red:.7176471,alpha:1,name:"WaterLeaf",blue:.8392157,green:.9215686,hex:"#b7ebd6"},{red:.8862745,alpha:1,name:"WhiteIce",blue:.9372549,green:.9686275,hex:"#e2f7ef"}],[{red:.2941177,alpha:1,name:"HippieGreen",blue:.2901961,green:.5176471,hex:"#4b844a"},{red:.3411765,alpha:1,name:"FruitSalad",blue:.3176471,green:.6078432,hex:"#579b51"},{red:.4235294,alpha:1,name:"Fern",blue:.3960784,green:.6901961,hex:"#6cb065"},{red:.427451,alpha:1,name:"Mantis",blue:.3960784,green:.7607843,hex:"#6dc265"},{red:.5411765,alpha:1,name:"DeYork",blue:.5176471,green:.8078431,hex:"#8ace84"},{red:.772549,alpha:1,name:"GrannyApple",blue:.7568628,green:.9058824,hex:"#c5e7c1"},{red:.9098039,alpha:1,name:"AquaSpringCool",blue:.9019608,green:.9607843,hex:"#e8f5e6"}],[{red:.4705882,alpha:1,name:"Asparagus",blue:.2980392,green:.5764706,hex:"#78934c"},{red:.5529412,alpha:1,name:"ChelseaCucumber",blue:.3176471,green:.6784314,hex:"#8dad51"},{red:.6313726,alpha:1,name:"Olivine",blue:.3960784,green:.7568628,hex:"#a1c165"},{red:.6901961,alpha:1,name:"Conifer",blue:.3960784,green:.8470588,hex:"#b0d865"},{red:.7529412,alpha:1,name:"YellowGreen",blue:.5176471,green:.8784314,hex:"#c0e084"},{red:.8745098,alpha:1,name:"BerylGreen",blue:.7568628,green:.9372549,hex:"#dfefc1"},{red:.9098039,alpha:1,name:"AquaSpringWarm",blue:.9019608,green:.9607843,hex:"#e8f5e6"}],[{red:.6352941,alpha:1,name:"MuddyWaters",blue:.2901961,green:.5529412,hex:"#a28d4a"},{red:.7450981,alpha:1,name:"Sundance",blue:.3098039,green:.6509804,hex:"#bea64f"},{red:.827451,alpha:1,name:"Tacha",blue:.3921569,green:.7333333,hex:"#d3bb64"},{red:.9333333,alpha:1,name:"GoldenSand",blue:.3882353,green:.8156863,hex:"#eed063"},{red:.945098,alpha:1,name:"Buff",blue:.509804,green:.8509804,hex:"#f1d982"},{red:.972549,alpha:1,name:"Blond",blue:.7568628,green:.9254902,hex:"#f8ecc1"},{red:.9882353,alpha:1,name:"OldLaceGreen",blue:.9019608,green:.9686275,hex:"#fcf7e6"}],[{red:.654902,alpha:1,name:"Alpine",blue:.2588235,green:.5058824,hex:"#a78142"},{red:.7686275,alpha:1,name:"Tussock",blue:.2666667,green:.5960785,hex:"#c49844"},{red:.8470588,alpha:1,name:"RobRoy",blue:.345098,green:.6745098,hex:"#d8ac58"},{red:.9607843,alpha:1,name:"SaffronMango",blue:.3333333,green:.7450981,hex:"#f5be55"},{red:.9686275,alpha:1,name:"Chardonnay",blue:.4666667,green:.7960784,hex:"#f7cb77"},{red:.9843137,alpha:1,name:"DairyCream",blue:.7333333,green:.8980392,hex:"#fbe5bb"},{red:.9921569,alpha:1,name:"OldLaceYellow",blue:.8941177,green:.9607843,hex:"#fdf5e4"}],[{red:.6705883,alpha:1,name:"Bourbon",blue:.2235294,green:.4470588,hex:"#ab7239"},{red:.7882353,alpha:1,name:"GoldenBell",blue:.2235294,green:.5254902,hex:"#c98639"},{red:.8666667,alpha:1,name:"FireBush",blue:.3019608,green:.6039216,hex:"#dd9a4d"},{red:.9843137,alpha:1,name:"NeonCarrot",blue:.2784314,green:.654902,hex:"#fba747"},{red:.9882353,alpha:1,name:"Rajah",blue:.4235294,green:.7254902,hex:"#fcb96c"},{red:.9921569,alpha:1,name:"SandyBeach",blue:.7098039,green:.8627451,hex:"#fddcb5"},{red:.9960784,alpha:1,name:"Sazerac",blue:.8823529,green:.945098,hex:"#fef1e1"}],[{red:.654902,alpha:1,name:"OrangeRoughy",blue:.2,green:.3176471,hex:"#a75133"},{red:.7764706,alpha:1,name:"Ecstasy",blue:.2117647,green:.3686275,hex:"#c65e36"},{red:.854902,alpha:1,name:"Jaffa",blue:.2941177,green:.4509804,hex:"#da734b"},{red:.9686275,alpha:1,name:"OutrageousOrange",blue:.2666667,green:.4627451,hex:"#f77644"},{red:.9764706,alpha:1,name:"Salmon",blue:.4117647,green:.5686275,hex:"#f99169"},{red:.9882353,alpha:1,name:"Apricot",blue:.7058824,green:.7843137,hex:"#fcc8b4"},{red:.9960784,alpha:1,name:"Chablis",blue:.8823529,green:.9137255,hex:"#fee9e1"}],[{red:.6431373,alpha:1,name:"MilanoRed",blue:.1843137,green:.1882353,hex:"#a4302f"},{red:.7607843,alpha:1,name:"Mahogany",blue:.2039216,green:.2156863,hex:"#c23734"},{red:.8392157,alpha:1,name:"Valencia",blue:.2980392,green:.3137255,hex:"#d6504c"},{red:.9490196,alpha:1,name:"CarminePink",blue:.254902,green:.2705882,hex:"#f24541"},{red:.9607843,alpha:1,name:"PastelRed",blue:.4039216,green:.4156863,hex:"#f56a67"},{red:.9803922,alpha:1,name:"Sundown",blue:.7019608,green:.7098039,hex:"#fab5b3"},{red:.9921569,alpha:1,name:"Pippin",blue:.8823529,green:.8823529,hex:"#fde1e1"}]];function J(t,n){let e,r;if("string"==typeof t&&null===n){for(const n of H)for(const e of n)if(e.name===t)return e;throw new Error("can't find colour")}if("number"==typeof t&&null===n)throw new Error("invalid");"number"==typeof t&&(e=t),"number"==typeof n&&(r=n),"string"==typeof t&&null!==n&&(e=Z[t]),"string"==typeof n&&(r=Y[n]);try{return H[e][r]}catch(t){throw t}}class X{constructor(t,n,e=K.BASIC){[this.x,this.y,this.type]=[t,n,e],this.colour=J(0,6),this.clipper=new V.a,this.spliner=F}posFromTuple(t){[this.x,this.y]=t}addNeighbour(t){this.neighbours.push(t)}isNeighbour(t){return this.neighbours.includes(t)}get getNeighbours(){return this.neighbours}set setPolygon(t){this.polygon=t}drawBasic(t){if(!this.polygon)throw new Error("no polygon linked to this site");let n=this.clipper.data([...this.polygon,this.polygon[0]]).padding(6)[0];n=D.range(0,10,.1).map(t=>this.spliner(t/10,3,[...n,n[1],n[2]])),t instanceof p5&&(t.fill(this.colour.hex),t.beginShape(),this.polygon.map(n=>t.vertex(n[0],n[1])),t.endShape(CLOSE)),t instanceof Window&&(fill(this.colour.hex),beginShape(),n.map(t=>vertex(t[0],t[1])),endShape())}smooth(){if(!this.polygon)throw new Error("no polygon found");this.centroid=q(this.polygon),this.posFromTuple(this.centroid)}}let Q,tt;const nt=[];let et=1e3;function rt(){createCanvas(300,300).parent("#canvas"),background(55),Q=W().size([width,height]).x(t=>t.x).y(t=>t.y),D.range(24).map(t=>{const n=new X(D.random(width),D.random(height),K.BASIC);n.index=t,n.colour=J(D.random(12),D.random(4)),nt.push(n)}),et=0}function it(){background(155),(tt=Q(nt)).polygons().map(t=>{const n=t.data;n.setPolygon=t,strokeWeight(2+Math.sin(frameCount/100)),n.drawBasic(window),et<12&&n.smooth()}),et++}function ut(){nt.push(new X(mouseX,mouseY,0)),et=0}(t=>Object.keys(r).forEach(n=>{t[n]=r[n]}))(window)},function(t,n){var e=t.exports.isArray=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)};t.exports.equals=function(t,n){return t[0]===n[0]&&t[1]===n[1]},t.exports.orientRings=function t(n,r,i){var u,o;if(r=r||0,e(n)&&"number"==typeof n[0][0]){var a=0,f=n;for(u=0,o=f.length;u<o;u++){var l=f[u],c=f[(u+1)%o];a+=l[0]*c[1],a-=c[0]*l[1]}(!i&&a>0||i&&a<0)&&f.reverse()}else for(u=0,o=n.length;u<o;u++)t(n[u],r+1,u>0);return n}},function(t,n){function e(t,n){return t[0]*n[1]-t[1]*n[0]}function r(t,n){return t[0]*n[0]+t[1]*n[1]}t.exports=function(t,n,i,u,o){var a=[n[0]-t[0],n[1]-t[1]],f=[u[0]-i[0],u[1]-i[1]];function l(t,n,e){return[t[0]+n*e[0],t[1]+n*e[1]]}var c=[i[0]-t[0],i[1]-t[1]],s=e(a,f),h=s*s,p=r(a,a);if(h>1e-9*p*r(f,f)){var v=e(c,f)/s;if(v<0||v>1)return null;var d=e(c,a)/s;return d<0||d>1?null:o?null:[l(t,v,a)]}var g=r(c,c);if((h=(s=e(c,a))*s)>1e-9*p*g)return null;var _=r(a,c)/p,y=_+r(a,f)/p,b=Math.min(_,y),m=Math.max(_,y);return b<=1&&m>=0?1===b?o?null:[l(t,b>0?b:0,a)]:0===m?o?null:[l(t,m<1?m:1,a)]:o&&0===b&&1===m?null:[l(t,b>0?b:0,a),l(t,m<1?m:1,a)]:null}},function(t,n,e){var r=e(1),i=e(3),u=e(2);t.exports=function(t,n){return t===n?0:0!==r(t.point,t.otherEvent.point,n.point)||0!==r(t.point,t.otherEvent.point,n.otherEvent.point)?u(t.point,n.point)?t.isBelow(n.otherEvent.point)?-1:1:t.point[0]===n.point[0]?t.point[1]<n.point[1]?-1:1:1===i(t,n)?n.isAbove(t.point)?-1:1:t.isBelow(n.point)?-1:1:t.isSubject!==n.isSubject?t.isSubject?-1:1:u(t.point,n.point)?u(t.otherEvent.point,n.otherEvent.point)?0:t.contourId>n.contourId?1:-1:1===i(t,n)?1:-1}},function(t,n,e){var r=e(1),i=e(5);function u(t,n,e,r,u){this.left=n,this.point=t,this.otherEvent=e,this.isSubject=r,this.type=u||i.NORMAL,this.inOut=!1,this.otherInOut=!1,this.prevInResult=null,this.inResult=!1,this.resultInOut=!1}u.prototype={isBelow:function(t){return this.left?r(this.point,this.otherEvent.point,t)>0:r(this.otherEvent.point,this.point,t)>0},isAbove:function(t){return!this.isBelow(t)},isVertical:function(){return this.point[0]===this.otherEvent.point[0]}},t.exports=u},function(t,n,e){var r=e(4);function i(t){this.data=t,this.left=null,this.right=null}function u(t){this._root=null,this._comparator=t,this.size=0}i.prototype.get_child=function(t){return t?this.right:this.left},i.prototype.set_child=function(t,n){t?this.right=n:this.left=n},u.prototype=new r,u.prototype.insert=function(t){if(null===this._root)return this._root=new i(t),this.size++,!0;for(var n=0,e=null,r=this._root;;){if(null===r)return r=new i(t),e.set_child(n,r),ret=!0,this.size++,!0;if(0===this._comparator(r.data,t))return!1;n=this._comparator(r.data,t)<0,e=r,r=r.get_child(n)}},u.prototype.remove=function(t){if(null===this._root)return!1;var n=new i(void 0),e=n;e.right=this._root;for(var r=null,u=null,o=1;null!==e.get_child(o);){r=e,e=e.get_child(o);var a=this._comparator(t,e.data);o=a>0,0===a&&(u=e)}return null!==u&&(u.data=e.data,r.set_child(r.right===e,e.get_child(null===e.left)),this._root=n.right,this.size--,!0)},t.exports=u},function(t,n,e){var r=e(4);function i(t){this.data=t,this.left=null,this.right=null,this.red=!0}function u(t){this._root=null,this._comparator=t,this.size=0}function o(t){return null!==t&&t.red}function a(t,n){var e=t.get_child(!n);return t.set_child(!n,e.get_child(n)),e.set_child(n,t),t.red=!0,e.red=!1,e}function f(t,n){return t.set_child(!n,a(t.get_child(!n),!n)),a(t,n)}i.prototype.get_child=function(t){return t?this.right:this.left},i.prototype.set_child=function(t,n){t?this.right=n:this.left=n},u.prototype=new r,u.prototype.insert=function(t){var n=!1;if(null===this._root)this._root=new i(t),n=!0,this.size++;else{var e=new i(void 0),r=0,u=0,l=null,c=e,s=null,h=this._root;for(c.right=this._root;;){if(null===h?(h=new i(t),s.set_child(r,h),n=!0,this.size++):o(h.left)&&o(h.right)&&(h.red=!0,h.left.red=!1,h.right.red=!1),o(h)&&o(s)){var p=c.right===l;h===s.get_child(u)?c.set_child(p,a(l,!u)):c.set_child(p,f(l,!u))}var v=this._comparator(h.data,t);if(0===v)break;u=r,r=v<0,null!==l&&(c=l),l=s,s=h,h=h.get_child(r)}this._root=e.right}return this._root.red=!1,n},u.prototype.remove=function(t){if(null===this._root)return!1;var n=new i(void 0),e=n;e.right=this._root;for(var r=null,u=null,l=null,c=1;null!==e.get_child(c);){var s=c;u=r,r=e,e=e.get_child(c);var h=this._comparator(t,e.data);if(c=h>0,0===h&&(l=e),!o(e)&&!o(e.get_child(c)))if(o(e.get_child(!c))){var p=a(e,c);r.set_child(s,p),r=p}else if(!o(e.get_child(!c))){var v=r.get_child(!s);if(null!==v)if(o(v.get_child(!s))||o(v.get_child(s))){var d=u.right===r;o(v.get_child(s))?u.set_child(d,f(r,s)):o(v.get_child(!s))&&u.set_child(d,a(r,s));var g=u.get_child(d);g.red=!0,e.red=!0,g.left.red=!1,g.right.red=!1}else r.red=!1,v.red=!0,e.red=!0}}return null!==l&&(l.data=e.data,r.set_child(r.right===e,e.get_child(null===e.left)),this.size--),this._root=n.right,null!==this._root&&(this._root.red=!1),null!==l},t.exports=u},function(t,n,e){t.exports={RBTree:e(14),BinTree:e(13)}},function(t,n,e){"use strict";function r(t,n){if(!(this instanceof r))return new r(t,n);if(this.data=t||[],this.length=this.data.length,this.compare=n||i,this.length>0)for(var e=(this.length>>1)-1;e>=0;e--)this._down(e)}function i(t,n){return t<n?-1:t>n?1:0}t.exports=r,t.exports.default=r,r.prototype={push:function(t){this.data.push(t),this.length++,this._up(this.length-1)},pop:function(){if(0!==this.length){var t=this.data[0];return this.length--,this.length>0&&(this.data[0]=this.data[this.length],this._down(0)),this.data.pop(),t}},peek:function(){return this.data[0]},_up:function(t){for(var n=this.data,e=this.compare,r=n[t];t>0;){var i=t-1>>1,u=n[i];if(e(r,u)>=0)break;n[t]=u,t=i}n[t]=r},_down:function(t){for(var n=this.data,e=this.compare,r=this.length>>1,i=n[t];t<r;){var u=1+(t<<1),o=u+1,a=n[u];if(o<this.length&&e(n[o],a)<0&&(u=o,a=n[o]),e(a,i)>=0)break;n[t]=a,t=u}n[t]=i}}},function(t,n,e){var r=0,i=1,u=2,o=3,a=[],f=e(5),l=e(16),c=e(15).RBTree,s=e(12),h=e(3),p=e(11),v=e(10),d=e(2),g=Math.max,_=Math.min;function y(t,n,e,r,i,u){var o=new s(t,!1,void 0,e),a=new s(n,!1,o,e);o.otherEvent=a,o.contourId=a.contourId=r,h(o,a)>0?a.left=!0:o.left=!0,u[0]=_(u[0],t[0]),u[1]=_(u[1],t[1]),u[2]=g(u[2],t[0]),u[3]=g(u[3],t[1]),i.push(o),i.push(a)}var b=0;function m(t,n,e,r,i){var u,o;if("number"==typeof t[0][0])for(u=0,o=t.length-1;u<o;u++)y(t[u],t[u+1],n,e+1,r,i);else for(u=0,o=t.length;u<o;u++)b++,m(t[u],n,b,r,i)}function x(t,n,e,r){var i=new l(null,h);return b=0,m(t,!0,0,i,e),m(n,!1,0,i,r),i}function w(t,n,e,r){null===n?(t.inOut=!1,t.otherInOut=!0):t.isSubject===n.isSubject?(t.inOut=!n.inOut,t.otherInOut=n.otherInOut):(t.inOut=!n.otherInOut,t.otherInOut=n.isVertical()?!n.inOut:n.inOut),n&&(t.prevInResult=!I(n,r)||n.isVertical()?n.prevInResult:n),t.inResult=I(t,r)}function I(t,n){switch(t.type){case f.NORMAL:switch(n){case r:return!t.otherInOut;case i:return t.otherInOut;case u:return t.isSubject&&t.otherInOut||!t.isSubject&&!t.otherInOut;case o:return!0}case f.SAME_TRANSITION:return n===r||n===i;case f.DIFFERENT_TRANSITION:return n===u;case f.NON_CONTRIBUTING:return!1}return!1}function R(t,n,e){var r=v(t.point,t.otherEvent.point,n.point,n.otherEvent.point),i=r?r.length:0;if(0===i)return 0;if(1===i&&(d(t.point,n.point)||d(t.otherEvent.point,n.otherEvent.point)))return 0;if(2===i&&t.isSubject===n.isSubject)return t.contourId===n.contourId&&console.warn("Edges of the same polygon overlap",t.point,t.otherEvent.point,n.point,n.otherEvent.point),0;if(1===i)return d(t.point,r[0])||d(t.otherEvent.point,r[0])||E(t,r[0],e),d(n.point,r[0])||d(n.otherEvent.point,r[0])||E(n,r[0],e),1;var u=[],o=!1,a=!1;return d(t.point,n.point)?o=!0:1===h(t,n)?u.push(n,t):u.push(t,n),d(t.otherEvent.point,n.otherEvent.point)?a=!0:1===h(t.otherEvent,n.otherEvent)?u.push(n.otherEvent,t.otherEvent):u.push(t.otherEvent,n.otherEvent),o&&a||o?(t.type=f.NON_CONTRIBUTING,n.type=t.inOut===n.inOut?f.SAME_TRANSITION:f.DIFFERENT_TRANSITION,o&&!a&&E(u[0].otherEvent,u[1].point,e),2):a?(E(u[0],u[1].point,e),3):u[0]!==u[3].otherEvent?(E(u[0],u[1].point,e),E(u[1],u[2].point,e),3):(E(u[0],u[1].point,e),E(u[3].otherEvent,u[2].point,e),3)}function E(t,n,e){var r=new s(n,!1,t,t.isSubject),i=new s(n,!0,t.otherEvent,t.isSubject);return d(t.point,t.otherEvent.point)&&console.warn("what is that?",t),r.contourId=i.contourId=t.contourId,h(i,t.otherEvent)>0&&(t.otherEvent.left=!0,i.left=!1),t.otherEvent.otherEvent=i,t.otherEvent=r,e.push(i),e.push(r),e}function C(t,n,e,i,o,a){for(var f,l,s=[],h=new c(p),v=(s=[],_(i[2],o[2]));t.length;){var d=t.pop();if(s.push(d),a===r&&d.point[0]>v||a===u&&d.point[0]>i[2])break;if(d.left){if(h.insert(d),l=h.findIter(d),f=h.findIter(d),d.iterator=h.findIter(d),!f||!l){console.log("brute");var g=O(h);f=g[0],l=g[1]}if(f.data()!==h.min()?f.prev():((f=h.iterator()).prev(),f.next()),l.next(),w(d,f.data(),0,a),l.data()&&2===R(d,l.data(),t)&&(w(d,f.data(),0,a),w(d,l.data(),0,a)),f.data()&&2===R(f.data(),d,t)){var y=h.findIter(f.data());y.data()!==h.min()?y.prev():(y=h.findIter(h.max())).next(),w(f.data(),y.data(),0,a),w(d,f.data(),0,a)}}else{if(d=d.otherEvent,l=h.findIter(d),!(f=h.findIter(d))||!l)continue;f.data()!==h.min()?f.prev():((f=h.iterator()).prev(),f.next()),l.next(),h.remove(d),l.data()&&f.data()&&R(f.data(),l.data(),t)}}return s}function O(t,n){for(var e,r=t.iterator(),i=t.iterator(),u=t.iterator();null!==(e=u.next())&&(r.next(),i.next(),e!==event););return[r,i]}function A(t,n,e){var r=t[n];t[n]=t[e],t[e]=r}function S(t){return t.reverse()}function j(t){return"[object Array]"===Object.prototype.toString.call(t)}function L(t,n){return j(t[0])&&!j(t[0][0])&&(t=[t]),t[n]=[],t}function k(t){var n,e,r=function(t){var n,e,r,i=[];for(e=0,r=t.length;e<r;e++)((n=t[e]).left&&n.inResult||!n.left&&n.otherEvent.inResult)&&i.push(n);for(var u=!1;!u;)for(u=!0,e=0,r=i.length;e<r;e++)e+1<r&&1===h(i[e],i[e+1])&&(A(i,e,e+1),u=!1);for(e=0,r=i.length;e<r;e++)i[e].pos=e;for(e=0,r=i.length;e<r;e++)if(!i[e].left){var o=i[e].pos;i[e].pos=i[e].otherEvent.pos,i[e].otherEvent.pos=o}return i}(t),i=Array(r.length),u=[],o=[],a=[],f={};for(n=0,e=r.length;n<e;n++)if(!i[n]){var l=[];u.push(l);var c=u.length-1;if(o.push(0),a.push(-1),r[n].prevInResult){var s=r[n].prevInResult.contourId;r[n].prevInResult.resultInOut?f[s]&&(L(u[a[s]],c),a[c]=a[s],o[c]=o[s],f[c]=!0):(L(u[s],c),a[c]=s,o[c]=o[s]+1,f[c]=!0)}var p=n,v=r[n].point;for(l.push(v);p>=n;)i[p]=!0,r[p].left?(r[p].resultInOut=!1,r[p].contourId=c):(r[p].otherEvent.resultInOut=!0,r[p].otherEvent.contourId=c),i[p=r[p].pos]=!0,l.push(r[p].point),p=N(p,r,i);i[p=-1===p?n:p]=i[r[p].pos]=!0,r[p].otherEvent.resultInOut=!0,r[p].otherEvent.contourId=c,1&o[c]&&S(l)}return u}function N(t,n,e){for(var r=t+1,i=n.length;r<i&&d(n[r].point,n[t].point);){if(!e[r])return r;r+=1}for(r=t-1;e[r];)r-=1;return r}function M(t,n,e){var f=function(t,n,e){var f=null;return t.length*n.length==0&&(e===r?f=a:e===u?f=t:e!==i&&e!==o||(f=0===t.length?n:t)),f}(t,n,e);if(f)return f===a?null:f;var l=[1/0,1/0,-1/0,-1/0],c=[1/0,1/0,-1/0,-1/0],s=x(t,n,l,c);return(f=function(t,n,e,f,l){var c=null;return(e[0]>f[2]||f[0]>e[2]||e[1]>f[3]||f[1]>e[3])&&(l===r?c=a:l===u?c=t:l!==i&&l!==o||(c=t.concat(n))),c}(t,n,l,c,e))?f===a?null:f:k(C(s,0,0,l,c,e))}t.exports=M,t.exports.union=function(t,n){return M(t,n,i)},t.exports.diff=function(t,n){return M(t,n,u)},t.exports.xor=function(t,n){return M(t,n,o)},t.exports.intersection=function(t,n){return M(t,n,r)},t.exports.operations={INTERSECTION:r,DIFFERENCE:u,UNION:i,XOR:o},t.exports.fillQueue=x,t.exports.computeFields=w,t.exports.subdivideSegments=C,t.exports.divideSegment=E,t.exports.possibleIntersection=R},function(t,n,e){t.exports=e(17)},function(t,n){function e(t,n){this.current=t,this.next=n,this._inNormal=this.inwardsNormal(),this._outNormal=this.outwardsNormal()}e.prototype.outwardsNormal=function(){var t=this.inwardsNormal();return[-t[0],-t[1]]},e.prototype.inwardsNormal=function(){var t=this.next[0]-this.current[0],n=this.next[1]-this.current[1],e=Math.sqrt(t*t+n*n);if(0===e)throw new Error("Vertices overlap");return[-n/e,t/e]},e.prototype.offset=function(t,n){return e.offsetEdge(this.current,this.next,t,n)},e.prototype.inverseOffset=function(t,n){return e.offsetEdge(this.next,this.current,t,n)},e.offsetEdge=function(t,n,r,i){return new e([t[0]+r,t[1]+i],[n[0]+r,n[1]+i])},e.prototype.inverse=function(){return new e(this.next,this.current)},t.exports=e},function(t,n){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,n){var e;e=function(){return this}();try{e=e||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(e=window)}t.exports=e}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,